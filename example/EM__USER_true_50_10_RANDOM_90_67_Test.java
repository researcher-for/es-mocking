import em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import  com.github.tomakehurst.wiremock.WireMockServer;
import  com.github.tomakehurst.wiremock.core.WireMockConfiguration;
import  com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;
import  com.alibaba.dcm.DnsCacheManipulator;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2023-04-29T01:54:00.807448800+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 43 tests
 * <br>
 * Covered targets: 795
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 58%
 * <br>
 * 
 */
public class EM__USER_true_50_10_RANDOM_90_67_Test {

    
    private static final SutHandler controller = new EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    private static WireMockServer wireMock__TCP__cwa_testresult_server__8088;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
        wireMock__TCP__cwa_testresult_server__8088 = new WireMockServer(new WireMockConfiguration()
            .bindAddress("127.0.26.222")
            .port(8088)
            .extensions(new ResponseTemplateTransformer(false)));
        wireMock__TCP__cwa_testresult_server__8088.start();
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
        wireMock__TCP__cwa_testresult_server__8088.stop();
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("tan","APP_SESSION"));
        controller.resetStateOfSUT();
        wireMock__TCP__cwa_testresult_server__8088.resetAll();
        wireMock__TCP__cwa_testresult_server__8088.stubFor(
            any(anyUrl())
            .atPriority(100)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","text/plain")
                    .withStatus(404)
                    .withBody("Not Found")
                )
        );
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"1\"}")
                .header("X-B3-Sampled", "lUb8")
                .header("cwa-fake", "5")
                .header("X-B3-Flags", "rwzHZ")
                .header("X-B3-TraceId", "oH1t7ekQTVCZD63")
                .header("X-CWA-TELETAN-TYPE", "LnBbpzE")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 6L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1964-12-13 16:14:13\"")
                .d("UPDATED_AT", "\"1900-11-23 07:04:26\"")
                .d("HASHED_GUID", "\"?\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4658d2193600688be424252146e27bab8dc7d62d9a1949b802d5eee8fee457be\"")
                .d("TELE_TAN_HASH", "\"_EM_19_XYZ_r\"")
                .d("TAN_COUNTER", "-16")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_5734_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 7L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1932-09-01 15:49:29\"")
                .d("UPDATED_AT", "\"2100-09-24 11:59:05\"")
                .d("HASHED_GUID", "\"_EM_5730_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"499f2e064424c46d837bdc5eabdb52659ce0b7de533cfb5c8de0233e1a822873\"")
                .d("TELE_TAN_HASH", "\"_EM_5735_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"_EM_5736_XYZ_\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"T4\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "PjiPDRZ82YY7Wpj")
                .header("X-B3-Flags", "]rjPFc3F")
                .header("b3", "o2KU_TJDCyUb")
                .header("X-B3-Sampled", "_EM_5410_XYZ_")
                .header("X-B3-TraceId", "_EM_5729_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a499ae91-9cab-4dbc-be1e-0703fc7cb23c\", " + 
                    " \"responsePadding\": \"iVWqwn9JmSkpWUCJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/AppSessionService_157_getAppSessionByToken
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 6L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"2000-11-09 00:29:00\"")
                .d("UPDATED_AT", "\"1924-12-23 00:29:13\"")
                .d("HASHED_GUID", "\"_EM_20825_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4658d2193600688be424252146e27bab8dc7d62d9a1949b802d5eee8fee457be\"")
                .d("TELE_TAN_HASH", "\"_EM_19_XYZ_r\"")
                .d("TAN_COUNTER", "-262144")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_UE_98UXYU_U\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 7L)
                .d("VERSION", "-16272")
                .d("CREATED_AT", "\"2016-06-09 15:49:29\"")
                .d("UPDATED_AT", "\"2100-12-24 11:59:04\"")
                .d("HASHED_GUID", "\"toKpeM5O\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4N9c\"")
                .d("TELE_TAN_HASH", "\"7MMrjm56AV0_Z85\"")
                .d("TAN_COUNTER", "89988")
                .d("SOT", "\"RDEjCgIPOGBS\"")
                .d("HASHED_GUID_DOB", "\"A_VS1IXpfBoCBju\"")
                .d("TELETAN_TYPE", "\"pi\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        assertNotNull(wireMock__TCP__cwa_testresult_server__8088);
        wireMock__TCP__cwa_testresult_server__8088.stubFor(
            post(urlEqualTo("/api/v1/app/result"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(204)
                    .withBody("\"gS86vL_X\"")
                )
        );
        
        
        given().accept("*/*")
                .header("cwa-fake", "O1IGNlqVK5wGqK")
                .header("X-B3-Flags", "_EM_3379_XYZ_")
                .header("b3", "EGRde2XnITRQ")
                .header("X-B3-Sampled", "fAlSE")
                .header("X-B3-TraceId", "_EM_252_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a499ae91-8cac-4dbc-bf0e-0703fc7cb23c\", " + 
                    " \"responsePadding\": \"REmY156qtoze0cZjV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500) // app/coronawarn/verification/controller/ExternalTanController_119_generateTan
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        wireMock__TCP__cwa_testresult_server__8088.resetAll();
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "-882160321751144963")
                .d("CREATED_AT", "\"2000-06-09 11:06:29\"")
                .d("UPDATED_AT", "\"1953-12-18 02:29:29\"")
                .d("VALID_FROM", "\"1982-06-03 11:29:15\"")
                .d("VALID_UNTIL", "\"1988-03-31 20:58:34\"")
                .d("TAN_HASH", "\"f36dbe7c05584ed27d2b471cc05e68d771678177e6cb58e9ae9ed91194ea3548\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "2097366")
                .d("CREATED_AT", "\"2032-05-19 05:29:12\"")
                .d("UPDATED_AT", "\"2000-09-03 11:14:29\"")
                .d("VALID_FROM", "\"2016-09-27 11:44:29\"")
                .d("VALID_UNTIL", "\"1933-05-24 11:29:29\"")
                .d("TAN_HASH", "\"4BYy7x901G4Q\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-180")
                .d("CREATED_AT", "\"1912-05-01 00:46:20\"")
                .d("UPDATED_AT", "\"1939-10-07 22:54:29\"")
                .d("VALID_FROM", "\"1937-08-19 16:09:42\"")
                .d("VALID_UNTIL", "\"2000-09-13 00:29:29\"")
                .d("TAN_HASH", "\"_EM_7309_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2012-07-15 16:29:48\"")
                .d("UPDATED_AT", "\"1909-10-01 07:46:44\"")
                .d("VALID_FROM", "\"2000-07-16 19:28:21\"")
                .d("VALID_UNTIL", "\"1963-03-08 17:38:54\"")
                .d("TAN_HASH", "\"SSK6E8FMNLrzFwbz\"")
                .d("SOT", "\"_EM_2786_XYZ_\"")
                .d("TYPE", "\"_EM_7310_XYZ_\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"BU\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "535855646")
                .d("CREATED_AT", "\"2100-12-12 11:05:36\"")
                .d("UPDATED_AT", "\"2081-01-16 12:25:44\"")
                .d("HASHED_GUID", "\"_EM_2787_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"dfe3c144419923a8f730823990383faed003b4762f3615bb0e70f8b6b0750f60\"")
                .d("TELE_TAN_HASH", "\"MF246uD_GYUFZH0\"")
                .d("TAN_COUNTER", "-192")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_7312_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "512")
                .d("CREATED_AT", "\"1910-05-17 14:53:23\"")
                .d("UPDATED_AT", "\"1999-12-08 08:07:16\"")
                .d("HASHED_GUID", "\"n\"")
                .d("REGISTRATION_TOKEN_HASH", "\"0d8952c8ddc6de53593f3b18654cec0c34fb79867619d6c56c0d3b58b9a2cdf9\"")
                .d("TELE_TAN_HASH", "\"BUgK7Mt\"")
                .d("TAN_COUNTER", "4096")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"S_Hc8oGgsohNoHblg\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "751")
                .d("CREATED_AT", "\"1977-06-27 07:09:46\"")
                .d("UPDATED_AT", "\"2021-01-06 10:25:42\"")
                .d("HASHED_GUID", "\"Ifl\"")
                .d("REGISTRATION_TOKEN_HASH", "\"0d8952c8ddc6de53593f3b18654cec0c34fb79867619d6c56c0d3b58b9a2cdf9\"")
                .d("TELE_TAN_HASH", "\"Fsiu\"")
                .d("TAN_COUNTER", "16384")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_7315_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("b3", "_EM_31294_XYZ_")
                .header("X-B3-Sampled", "_EM_69_XYZ_C")
                .header("X-B3-TraceId", "_EM_7306_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"633c2b50-bd32-4af2-9dd5-ce6b7ce04381\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_7307_XYZ_\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("HW82UB89M3"));
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_7307_XYZ_\"}")
                .header("x-b3-sampled", "")
                .header("X-B3-Sampled", "uwH3pHQvaA")
                .header("cwa-fake", "yZo")
                .header("X-B3-Flags", "_EM_31295_XYZ_")
                .header("X-B3-TraceId", "D3McT")
                .header("x-b3-flags", "2s3q7NinwDn")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("MHR6K2PPJB"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "_EM_42085_XYZ_")
                .header("b3", "foo")
                .header("X-B3-Sampled", "wnp2RRl6aVmm")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d481d-da00-4f7f-8d7d-56593b4b93ae\", " + 
                    " \"responsePadding\": \"_EM_2784_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_7308_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ed3ca3ab-c46f-4e6e-bf57-d976ad0d520b\", " + 
                    " \"responsePadding\": \"P0xD8\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/controller/ExternalTestStateController_108_getTestState
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "-882160321751145219")
                .d("CREATED_AT", "\"2032-06-09 11:06:29\"")
                .d("UPDATED_AT", "\"1953-12-18 02:29:29\"")
                .d("VALID_FROM", "\"1982-06-03 11:29:15\"")
                .d("VALID_UNTIL", "\"1988-03-31 20:58:34\"")
                .d("TAN_HASH", "\"f36dbe7c05584ed27d2b471cc05e68d771678177e6cb58e9ae9ed91194ea3548\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "2097366")
                .d("CREATED_AT", "\"2032-05-19 05:29:12\"")
                .d("UPDATED_AT", "\"2000-09-02 03:14:28\"")
                .d("VALID_FROM", "\"2000-06-26 11:44:29\"")
                .d("VALID_UNTIL", "\"1933-05-24 11:29:29\"")
                .d("TAN_HASH", "\"4BYy7x901G4Q\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-180")
                .d("CREATED_AT", "\"1912-05-03 01:30:20\"")
                .d("UPDATED_AT", "\"1939-10-07 22:54:29\"")
                .d("VALID_FROM", "\"1937-08-19 16:09:42\"")
                .d("VALID_UNTIL", "\"2000-09-13 00:29:29\"")
                .d("TAN_HASH", "\"_EM_7309_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2012-11-15 16:29:48\"")
                .d("UPDATED_AT", "\"1909-10-01 07:46:44\"")
                .d("VALID_FROM", "\"2000-07-16 19:28:21\"")
                .d("VALID_UNTIL", "\"1963-03-08 17:38:54\"")
                .d("TAN_HASH", "\"SSK6E8FMNLrzFwbz\"")
                .d("SOT", "\"_EM_2786_XYZ_\"")
                .d("TYPE", "\"_EM_7310_XYZ_\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"BU\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "535855646")
                .d("CREATED_AT", "\"2100-12-12 11:05:36\"")
                .d("UPDATED_AT", "\"2081-01-16 12:25:44\"")
                .d("HASHED_GUID", "\"_EM_2787_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4736d6928dbb7dbeb8e60f985b3e5b5dfa2bf8cc5a8f10ba11d0c04ef4be5f80\"")
                .d("TELE_TAN_HASH", "\"MF246uH_GYUFZH0\"")
                .d("TAN_COUNTER", "-192")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_7312_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1910-05-17 14:53:23\"")
                .d("UPDATED_AT", "\"1999-12-08 08:07:16\"")
                .d("HASHED_GUID", "\"n\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"BUgK7Mt\"")
                .d("TAN_COUNTER", "4096")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"S_Hc8oGgsqhNoHblg\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "751")
                .d("CREATED_AT", "\"1977-06-27 07:09:46\"")
                .d("UPDATED_AT", "\"2021-01-06 10:25:42\"")
                .d("HASHED_GUID", "\"Ifl\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"Fsi\"")
                .d("TAN_COUNTER", "16384")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_7315_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("b3", "L6bpZB")
                .header("X-B3-Sampled", "_EM_69_XYZ^C")
                .header("X-B3-TraceId", "_EM_7306_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"633c2b50-bd32-4af2-9dd5-ce6b7ce04381\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"5iCe0hd9a9zWd8\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("XKTHQ8N7YE"));
        
        
        given().accept("*/*")
                .header("cwa-fake", "E")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"fd4c2416-ebfc-4e6b-b5a6-e93e8957c9d1\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500) // app/coronawarn/verification/controller/ExternalTanController_116_generateTan
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "foo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "wnp2RRl6aVmm")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d481d-da00-4f7f-8d7d-56593b4b93ae\", " + 
                    " \"responsePadding\": \"_EM_2784_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ed3ca3ab-c46f-4e6e-bf57-d976ad0d520b\", " + 
                    " \"responsePadding\": \"P0xD8\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "124")
                .d("CREATED_AT", "\"2000-01-16 23:17:52\"")
                .d("UPDATED_AT", "\"2000-01-21 11:29:29\"")
                .d("VALID_FROM", "\"2038-07-17 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "1048576")
                .d("CREATED_AT", "\"2099-02-23 10:29:30\"")
                .d("UPDATED_AT", "\"1926-01-05 02:27:02\"")
                .d("VALID_FROM", "\"1936-05-01 08:52:04\"")
                .d("VALID_UNTIL", "\"1964-12-15 18:25:21\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmakM\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "268436423")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:59\"")
                .d("HASHED_GUID", "\"UMURkUz6Ugq\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"waO29NE\"")
                .d("TAN_COUNTER", "262657")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_32272_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "1048576")
                .d("CREATED_AT", "\"1998-01-18 09:29:30\"")
                .d("UPDATED_AT", "\"2000-06-01 13:33:29\"")
                .d("HASHED_GUID", "\"_EM_3156_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWusts\"")
                .d("TELE_TAN_HASH", "\"El15Nt_bMafS\"")
                .d("TAN_COUNTER", "-33521575")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_23229_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2054-11-03 03:16:29\"")
                .d("UPDATED_AT", "\"2013-01-05 12:01:02\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "\"4cpynyXw\"")
                .d("TAN_COUNTER", "976")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_23281_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700613104")
                .d("CREATED_AT", "\"2000-04-16 11:06:59\"")
                .d("UPDATED_AT", "\"1900-02-16 20:09:34\"")
                .d("HASHED_GUID", "\"`EQU232U2_XYY_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "\"m}Ox\"")
                .d("TAN_COUNTER", "2")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3159_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "lWZEjoaNX")
                .header("b3", "_EM_32271_XYZ_")
                .header("X-B3-Sampled", "fALsE")
                .header("X-B3-TraceId", "_EM_3153_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"RCVNP4RJZZ\", " + 
                    " \"keyDob\": \"A2edb94B2ddb6C310eebCBFEbEeaBdcAEBd5a669Dec99DCF3EF6E4fa4fBA6A3e\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/AppSessionService_157_getAppSessionByToken
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "_EM_3154_XYZ_")
                .header("X-B3-TraceId", "_EM_23228_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("GVS9J42PE7"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "_EM_23234_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fd4e481d-d900-4f6f-9d6d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "B")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4dc9-a6af-c9babb2c4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeWok\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1902-10-30 19:01:52\"")
                .d("UPDATED_AT", "\"1968-01-13 11:13:29\"")
                .d("VALID_FROM", "\"2038-07-17 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-05-13 02:57:00\"")
                .d("TAN_HASH", "\"47c37e9b3a84da149630e9e8784f4e3cc02b44eef570f2ae477509916b139e60\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "-65536")
                .d("CREATED_AT", "\"2099-02-23 19:31:29\"")
                .d("UPDATED_AT", "\"1900-01-04 00:27:02\"")
                .d("VALID_FROM", "\"1936-05-01 00:54:04\"")
                .d("VALID_UNTIL", "\"1968-04-16 20:29:21\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmaD\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-12-05 00:48:59\"")
                .d("HASHED_GUID", "\"_EM_24053_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_839_XYZ_\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "517")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"VSs39I9F5\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "512")
                .d("CREATED_AT", "\"1936-01-18 09:29:30\"")
                .d("UPDATED_AT", "\"2000-06-01 13:29:29\"")
                .d("HASHED_GUID", "\"_EM_24054_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWustsh\"")
                .d("TELE_TAN_HASH", "\"yCSUTU1CuUXS\"")
                .d("TAN_COUNTER", "-33488807")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_23229_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "890356852")
                .d("CREATED_AT", "\"2022-03-04 03:16:29\"")
                .d("UPDATED_AT", "\"2013-01-05 11:01:02\"")
                .d("HASHED_GUID", "\"rp_MO0Aubgyt5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_UM_U3230[XYU^\"")
                .d("TELE_TAN_HASH", "\"4cpynyXw\"")
                .d("TAN_COUNTER", "525264")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3158_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678640")
                .d("CREATED_AT", "\"2100-06-20 07:06:57\"")
                .d("UPDATED_AT", "\"1900-02-11 22:07:34\"")
                .d("HASHED_GUID", "\"_EM_23232_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "-4094")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_3159_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "nIi1MmZZtZ2qd")
                .header("X-B3-Sampled", "fALSe")
                .header("X-B3-TraceId", "_EM_3153_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"RCVNP5SHZZ\", " + 
                    " \"keyDob\": \"A2edb94B2ddb6C310eebCBFEbEeaBdcAEBd5a669Dec99DCF3EF6E4fa4fBA6A3e\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "NNJPz8A4dD")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"_EM_24062_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/controller/ExternalTestStateController_112_getTestState
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_24049_XYZ_\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "_EM_3154_XYZ_")
                .header("X-B3-TraceId", "_EM_23228_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("EHW6C8KRB7"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fd4e481d-c900-4f5f-8e6d-57583b3aa39e\", " + 
                    " \"responsePadding\": \"_EM_24050_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "BX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4cc9-a6b0-c9babc2b4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeWok\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_7_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-2097144")
                .d("CREATED_AT", "\"1995-04-09 19:17:52\"")
                .d("UPDATED_AT", "\"2000-01-21 11:29:29\"")
                .d("VALID_FROM", "\"2038-07-23 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "-1048112")
                .d("CREATED_AT", "\"2067-06-23 11:39:29\"")
                .d("UPDATED_AT", "\"1927-06-05 02:27:02\"")
                .d("VALID_FROM", "\"1948-04-29 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-02-01 04:21:59\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmak\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "268436423")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:59\"")
                .d("HASHED_GUID", "\"2MgRstz6Igq\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_839_XYZ_\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "574")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-18 09:29:30\"")
                .d("UPDATED_AT", "\"2045-12-16 13:33:29\"")
                .d("HASHED_GUID", "\"4MKkikP8Da_8aT\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWusts\"")
                .d("TELE_TAN_HASH", "\"_EM_840_XYZ_\"")
                .d("TAN_COUNTER", "32841")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"mutGl\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "890356816")
                .d("CREATED_AT", "\"2054-11-03 01:20:11\"")
                .d("UPDATED_AT", "\"2012-05-05 11:01:29\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"NzTVUjibNH9\"")
                .d("TELE_TAN_HASH", "\"_EM_221_XYZ_\"")
                .d("TAN_COUNTER", "978")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"Bu0tKO2jFrT\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678896")
                .d("CREATED_AT", "\"2048-04-27 10:06:59\"")
                .d("UPDATED_AT", "\"1900-02-03 20:07:34\"")
                .d("HASHED_GUID", "\"_EM_841_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_222_XYZ_\"")
                .d("TELE_TAN_HASH", "\"mOx\"")
                .d("TAN_COUNTER", "520")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"_EM_289_XYZ_\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_836_XYZ_")
                .header("X-B3-Flags", "_EM_837_XYZ_")
                .header("b3", "RAxJk")
                .header("X-B3-Sampled", "_EM_210_XYZ_")
                .header("X-B3-TraceId", "_EM_838_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"_EM_208_XYZ_\", " + 
                    " \"keyDob\": \"_EM_209_XYZ_\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "NNJPz8A4dD")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("X-B3-Sampled", "")
                .header("X-B3-TraceId", "gUMohl2")
                .header("X-CWA-TELETAN-TYPE", "_EM_215_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9x")
                .header("b3", "foo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d900-4f60-9c6d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_283_XYZ_")
                .header("X-B3-Flags", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424487-5586-4389-b3bc-ed6a5f83ae4f\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_283_XYZ_")
                .header("b3", "z3D1FLP3TM1W")
                .header("X-B3-TraceId", "_EM_218_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-9011-488a-a45a-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"_EM_217_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_8_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1992-06-07 23:06:34\"")
                .d("UPDATED_AT", "\"2008-06-20 02:28:29\"")
                .d("VALID_FROM", "\"1982-02-03 11:29:15\"")
                .d("VALID_UNTIL", "\"1982-12-16 18:58:26\"")
                .d("TAN_HASH", "\"f36dbe7c05584ed27d2b471cc05e68d771678177e6cb58e9ae9ed91194ea3548\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "23068890")
                .d("CREATED_AT", "\"2032-06-19 05:19:29\"")
                .d("UPDATED_AT", "\"2000-08-03 11:42:32\"")
                .d("VALID_FROM", "\"2032-06-29 13:29:18\"")
                .d("VALID_UNTIL", "\"1933-05-24 00:00:29\"")
                .d("TAN_HASH", "\"T3sqTdBc3KzhM5D\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-131072")
                .d("CREATED_AT", "\"1900-01-17 02:46:20\"")
                .d("UPDATED_AT", "\"1931-10-07 22:29:29\"")
                .d("VALID_FROM", "\"1937-06-16 16:09:42\"")
                .d("VALID_UNTIL", "\"2000-10-05 08:27:27\"")
                .d("TAN_HASH", "\"663263814e1f398db737b3f755f466f280808bdc04d11ce0a6c8fb59da1b24dc\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "-65536")
                .d("CREATED_AT", "\"2012-11-15 16:16:48\"")
                .d("UPDATED_AT", "\"2000-12-16 11:46:29\"")
                .d("VALID_FROM", "\"1900-05-24 19:00:21\"")
                .d("VALID_UNTIL", "\"1900-05-04 17:54:59\"")
                .d("TAN_HASH", "\"a0b71be71d6db2e834af18c19a5715959f47af9febc5964c8812d3a4b29d2ced\"")
                .d("SOT", "\"_EM_15533_XYZ_\"")
                .d("TYPE", "\"\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EMj\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "535822366")
                .d("CREATED_AT", "\"2000-12-12 11:09:29\"")
                .d("UPDATED_AT", "\"2083-02-16 17:56:20\"")
                .d("HASHED_GUID", "\"_EM_2787_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9ab5eccfa5d0e6b163bc3c1b27c42436ab4236fb9d6712762c60d78db6f2fa7c\"")
                .d("TELE_TAN_HASH", "\"MF246uH_GYUFZH0\"")
                .d("TAN_COUNTER", "16746496")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"FVyiqM6cz56Iywun\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "-1048576")
                .d("CREATED_AT", "\"1918-05-17 06:53:23\"")
                .d("UPDATED_AT", "\"2000-06-16 08:07:16\"")
                .d("HASHED_GUID", "\"135c8fca672c886ea81ac8464856214cca30e44481958c2335960d7bfeb40362\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9ab5eccfa5d0e6b163bc3c1b27c42436ab4236fb9d6712762c60d78db6f2fa7c\"")
                .d("TELE_TAN_HASH", "\"jBL\"")
                .d("TAN_COUNTER", "4225")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"N5nS\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "33518")
                .d("CREATED_AT", "\"2000-06-27 03:29:54\"")
                .d("UPDATED_AT", "\"2021-01-16 10:25:42\"")
                .d("HASHED_GUID", "\"P\"")
                .d("REGISTRATION_TOKEN_HASH", "\"UUUg7U^UUZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_15588_XYZ_\"")
                .d("TAN_COUNTER", "-64")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"UEM_884_HQUU\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "1")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d01eb2c0-d8af-4db8-aac9-3c2a8d59dfdf\", " + 
                    " \"responsePadding\": \"_EM_13008_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.682730111E9))
                .body("'responsePadding'", containsString("43wXcCUBMyPjQGnxOTSDogAgKYdpiDbDHQjP9x8e4GRA9"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-Flags", "O1S")
                .header("b3", "_EM_15531_XYZ_")
                .header("X-B3-Sampled", "_EM_13004_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"743c2b51-be42-4af2-8dc5-cf5c7cf14381\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_15584_XYZ_\"}")
                .header("X-B3-Flags", "]3hG")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("DQM2ATW6ZH"));
        
        
        given().accept("*/*")
                .header("b3", "_EM_15585_XYZ_")
                .header("X-B3-Sampled", "_EM_2785_XYZ_")
                .header("X-B3-TraceId", "_EM_71_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe3d481d-bb10-4f6f-9d6e-57593c3aa3ae\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/TanService_292_getEntityByTan
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkSG")
                .header("X-B3-Flags", "1")
                .header("b3", "fop")
                .header("X-B3-Sampled", "_EM_15586_XYZ_")
                .header("X-B3-TraceId", "_EM_15587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97514478-55a6-4498-b2bc-ec5a5e74bd4f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkSG")
                .header("b3", "zCD1FLP3TM1W")
                .header("X-B3-Sampled", "Kn1GeAmduJ")
                .header("X-B3-TraceId", "nRI_WJv")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"21ba81a7-a0f1-488a-945a-cfc66cca6dd3\", " + 
                    " \"responsePadding\": \"km2Cc5uGSJ_WJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_9_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1963-06-19 23:17:52\"")
                .d("UPDATED_AT", "\"2000-01-21 09:13:29\"")
                .d("VALID_FROM", "\"2038-07-17 11:47:18\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2095-02-23 09:31:45\"")
                .d("UPDATED_AT", "\"1926-05-05 02:27:02\"")
                .d("VALID_FROM", "\"1936-06-01 00:54:04\"")
                .d("VALID_UNTIL", "\"1968-04-16 20:29:21\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmak\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "268436423")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-11-05 17:17:51\"")
                .d("HASHED_GUID", "\"UMURkUz6Ugq\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9133be1e4785a382bc5add04a03b034d398c2079b16d07f10403597dc3015f94\"")
                .d("TELE_TAN_HASH", "\"waO29NE\"")
                .d("TAN_COUNTER", "1049089")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"OYN38fNovhOeWokX\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-18 17:31:37\"")
                .d("UPDATED_AT", "\"2016-06-01 13:33:29\"")
                .d("HASHED_GUID", "\"_EM_3156_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWusts\"")
                .d("TELE_TAN_HASH", "\"_EM_23236_XYZ_\"")
                .d("TAN_COUNTER", "-33520551")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_23229_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "890356848")
                .d("CREATED_AT", "\"2054-11-03 03:16:29\"")
                .d("UPDATED_AT", "\"2000-01-07 11:05:00\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "\"4UpynyXw\"")
                .d("TAN_COUNTER", "972")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"o6\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700662256")
                .d("CREATED_AT", "\"2000-04-14 11:06:58\"")
                .d("UPDATED_AT", "\"1900-02-03 20:15:29\"")
                .d("HASHED_GUID", "\"UEM_UU232_XYZU\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9133be1e4785a382bc5add04a03b034d398c2079b16d07f10403597dc3015f94\"")
                .d("TELE_TAN_HASH", "\"muOx\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3159_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "kO]EBUUN")
                .header("b3", "_EM_23898_XYZ_")
                .header("X-B3-Sampled", "faLSe")
                .header("X-B3-TraceId", "1HqRNEJ51QvyzT6")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"d7ef7A0BCF1fd9aFf3d43FBc74BCf398f1cdD3B3DfCAfbAE46f6ba2F4FFddeEc\", " + 
                    " \"keyDob\": \"A3fdc94B2cdb6C301eebCCFEbDeaCdbBEBd5a578Dec99DCF3DF7E4fa40BA6A3e\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("66e1d104-5c35-4595-874b-2644cc388a55"))
                .body("'responsePadding'", containsString("i"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_g\"}")
                .header("b3", "lwylTqMeqvML9Gp5_")
                .header("X-B3-TraceId", "_EM_23228_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("PE6TEU3YA9"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "_EM_23234_XYZ_")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fd4e481d-d900-4f6f-9d6d-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "BX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4dc9-a6af-c9babb2c4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeWokX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_10_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-1023")
                .d("CREATED_AT", "\"1995-04-05 12:13:59\"")
                .d("UPDATED_AT", "\"2000-08-31 11:29:13\"")
                .d("VALID_FROM", "\"2030-06-15 11:32:17\"")
                .d("VALID_UNTIL", "\"1940-03-12 04:29:28\"")
                .d("TAN_HASH", "\"45a08e148e8226e3b8ed3dabc35a63b0a4d1f69924e002193b33c2d90ced7567\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "126877696")
                .d("CREATED_AT", "\"2063-12-23 07:37:53\"")
                .d("UPDATED_AT", "\"1993-01-09 02:27:29\"")
                .d("VALID_FROM", "\"1948-06-29 08:38:52\"")
                .d("VALID_UNTIL", "\"2000-08-16 11:20:27\"")
                .d("TAN_HASH", "\"_EM_1520_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "128")
                .d("CREATED_AT", "\"2000-05-03 00:48:36\"")
                .d("UPDATED_AT", "\"2004-11-12 11:29:29\"")
                .d("HASHED_GUID", "\"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4a799eacfd732103680f622b14c8ed9604a9dfab01ef2b71bed4cfa88cebbeab\"")
                .d("TELE_TAN_HASH", "\"_EM_12842_XYZ_\"")
                .d("TAN_COUNTER", "-16384")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_1749_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "1051800")
                .d("CREATED_AT", "\"2000-04-01 11:21:29\"")
                .d("UPDATED_AT", "\"2041-04-16 11:29:00\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"_EM_3208_XYZ_R\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"B20db83D2ccb6C310fdaBAFEcEdaCdb9EBd5a879Deb89ECF2EE6D3fa4eC97A2f\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-07-16 11:29:29\"")
                .d("UPDATED_AT", "\"2012-05-05 09:29:29\"")
                .d("HASHED_GUID", "\"B20db83D2ccb6C310fdaBAFEcEdaCdb9EBd5a879Deb89ECF2EE6D3fa4eC97A2f\"")
                .d("REGISTRATION_TOKEN_HASH", "\"j\"")
                .d("TELE_TAN_HASH", "\"_EM_3210_XYZ_\"")
                .d("TAN_COUNTER", "65536")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"yMVbluLrTIA3h\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1662946544")
                .d("CREATED_AT", "\"2048-03-31 11:29:29\"")
                .d("UPDATED_AT", "\"1932-06-03 20:30:27\"")
                .d("HASHED_GUID", "\"b7a85ad2c1b99fda8173669aca522a928e61442e505cb9d274f9f999a358cc83\"")
                .d("REGISTRATION_TOKEN_HASH", "\"ad42b0955b4783bb998c47a632f3227f5592e52da81b4a742e5a1dcc9bb32ba5\"")
                .d("TELE_TAN_HASH", "\"sZACZYCJIq9z4\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"9FU65bP1uV9Mo\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "N0")
                .header("X-B3-Flags", "_EM_484_XYZ_s")
                .header("b3", "9")
                .header("X-B3-Sampled", "_EM_3205_XYZ_")
                .header("X-B3-TraceId", "wc")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"7b4f5c97e389166425a334ebeaf70610923c65dcdb58401e2de8bd312c1c13d5\", " + 
                    " \"keyDob\": \"B20db83D2ccb6C310fdaBAFEcEdaCdb9EBd5a879Deb89ECF2EE6D3fa4eC97A2f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/AppSessionService_168_checkRegistrationTokenAlreadyExistsForGuid
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"c3d744cd-aefe-415d-Adf2-79ad1036681f\", " + 
                    " \"responsePadding\": \"rSHDuTS00r\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_3206_XYZ_\"}")
                .header("b3", "_EM_585_XYZ_")
                .header("X-B3-Sampled", "_EM_487_XYZ_")
                .header("X-B3-TraceId", "_EM_12841_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("5HR7B2BYK3"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Sampled", "true")
                .header("X-B3-TraceId", "_EM_1782_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d910-4f60-Bd7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "fgo")
                .header("b3", "_EM_1783_XYZ_")
                .header("X-B3-Sampled", "FAlse")
                .header("X-B3-TraceId", "C")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"88535369-5797-4398-b4ad-ec6b4e75bd5c\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("59c744a1-9805-4d05-89af-b4f5f6c76680"))
                .body("'responsePadding'", containsString("GCOnVwO3WJrrFZj"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_4.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-TraceId", "lxbt_VxuTF13T")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-9011-498b-946a-c0c76cd97de3\", " + 
                    " \"responsePadding\": \"_EM_3207_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("82c4a77b-d1e2-4f71-a8d3-0eac7c7e2f9d"))
                .body("'responsePadding'", containsString("6TPY7jWcJkUEzmQ"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_11_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "1536")
                .d("CREATED_AT", "\"2059-01-16 19:17:52\"")
                .d("UPDATED_AT", "\"2000-02-16 11:31:30\"")
                .d("VALID_FROM", "\"2038-08-16 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "-129024")
                .d("CREATED_AT", "\"2100-06-23 11:29:29\"")
                .d("UPDATED_AT", "\"1926-05-05 03:29:30\"")
                .d("VALID_FROM", "\"1938-08-01 00:54:04\"")
                .d("VALID_UNTIL", "\"1968-08-16 10:45:29\"")
                .d("TAN_HASH", "\"8f842cda6f4c29064645397d391b018e575d44711c6bcb84b6229b6fd8eb6bfa\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "-1050624")
                .d("CREATED_AT", "\"1907-07-16 13:29:29\"")
                .d("UPDATED_AT", "\"2039-09-13 23:16:27\"")
                .d("HASHED_GUID", "\"u\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"X\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-17 09:29:30\"")
                .d("UPDATED_AT", "\"1900-10-04 13:29:27\"")
                .d("HASHED_GUID", "\"qU_Ub8DUa=ftso5U\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_25273_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_24546_XYZ_\"")
                .d("TAN_COUNTER", "-33556407")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"2rrRLGhhzqRq\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "-1")
                .d("CREATED_AT", "\"2086-12-01 03:16:25\"")
                .d("UPDATED_AT", "\"2013-05-04 19:13:16\"")
                .d("HASHED_GUID", "\"rp[MO0Aubgyt5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8b122d3833fb9bdd7d9cce1e12283c9b5a508ee7b13c5a7a7f1f89dee5c704a1\"")
                .d("TELE_TAN_HASH", "\"sYuNuyrcfIp1PY\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3158_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678496")
                .d("CREATED_AT", "\"2000-04-16 11:06:59\"")
                .d("UPDATED_AT", "\"1902-02-04 20:07:34\"")
                .d("HASHED_GUID", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9133be1e4785a382bc5add04a03b034d398c2079b16d07f10403597dc3015f94\"")
                .d("TELE_TAN_HASH", "\"_EM_25274_XYZ_\"")
                .d("TAN_COUNTER", "-131072")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "lWZE]oaNb")
                .header("b3", "fEMGEn1IxyLqw")
                .header("X-B3-Sampled", "fALse")
                .header("X-B3-TraceId", "_EM_24552_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"A4FA261aD6CABb23CaEfaA9fb57E29Ed580dCfAb70AbCedEB8F956a15BF38E77\", " + 
                    " \"keyDob\": \"A3edb94B2ddb6C310edbCBFEbEeaCebAEBc5a669Dec99DCF3EE6E4fF3fBB6A3d\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("e30a62d1-9706-45c6-8bdc-d4559f98e63c"))
                .body("'responsePadding'", containsString("t"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .header("cwa-fake", "NNJPz8A4dD")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"k\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("X-B3-Flags", "e3hG")
                .header("X-B3-Sampled", "_EM_24553_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "_EM_215_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "[C")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-ea01-4f60-9d6d-57583b5aa49f\", " + 
                    " \"responsePadding\": \"_EM_24539_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("cwa-fake", "_EM_24545_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4dc9-a6af-c9babb2c4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeUokj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("5ed2950e-8bda-4681-a46d-d53d20c07bb0"))
                .body("'responsePadding'", containsString("tt2EgHzrj8KdGGf"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_4.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_12_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1995-04-09 23:13:59\"")
                .d("UPDATED_AT", "\"2000-01-21 05:00:16\"")
                .d("VALID_FROM", "\"2000-06-16 11:08:09\"")
                .d("VALID_UNTIL", "\"1936-06-16 11:29:13\"")
                .d("TAN_HASH", "\"535a3ff0b57113d9838171c73bd906f2dd79b56750565d51c4316c3fae949d2a\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "524288")
                .d("CREATED_AT", "\"2063-10-16 15:37:51\"")
                .d("UPDATED_AT", "\"2000-05-05 00:00:17\"")
                .d("VALID_FROM", "\"1964-02-28 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-02-03 04:21:59\"")
                .d("TAN_HASH", "\"_EM_1528_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "285213639")
                .d("CREATED_AT", "\"1900-07-09 00:50:36\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:59\"")
                .d("HASHED_GUID", "\"_EM_1450_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"d\"")
                .d("TELE_TAN_HASH", "\"_EM_497_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "152")
                .d("CREATED_AT", "\"2049-08-17 23:46:00\"")
                .d("UPDATED_AT", "\"2041-08-01 13:29:29\"")
                .d("HASHED_GUID", "\"_EM_1529_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_490_XYZ_\"")
                .d("TELE_TAN_HASH", "\"KC\"")
                .d("TAN_COUNTER", "8265")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1530_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2070-03-03 01:21:11\"")
                .d("UPDATED_AT", "\"2014-05-05 07:00:29\"")
                .d("HASHED_GUID", "\"_EM_1531_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_1451_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_1532_XYZ_\"")
                .d("TAN_COUNTER", "125567698")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1533_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1666993456")
                .d("CREATED_AT", "\"2000-01-16 11:22:29\"")
                .d("UPDATED_AT", "\"1901-04-01 20:23:35\"")
                .d("HASHED_GUID", "\"_EM_1534_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_222_XYZ_\"")
                .d("TELE_TAN_HASH", "\"H0\"")
                .d("TAN_COUNTER", "134217736")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_492_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_483_XYZ_")
                .header("X-B3-Flags", "_EM_484_XYZ_")
                .header("b3", "_EM_1524_XYZ_")
                .header("X-B3-Sampled", "urfCD")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"RDVNP4SJZ2\", " + 
                    " \"keyDob\": \"x2dda85A1cdb6C210eebCBFEbEdaAebAEBe5a67ADfb99CDa2EF6E50a4fB96B4f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-Flags", "_EM_494_XYZ_")
                .header("X-B3-Sampled", "FALSE")
                .header("X-B3-TraceId", "MlbcctJmhC7")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"543d2c6f-ae32-4ce2-9df7-b07c6ddf3392\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_h\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-CWA-TELETAN-TYPE", "_EM_488_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Sampled", "_EM_489_XYZ_")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d900-4f60-Bc7d-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        ValidatableResponse res_4 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "_EM_1525_XYZ_")
                .header("X-B3-Sampled", "FAlSe")
                .header("X-B3-TraceId", "_EM_285_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424487-5596-4399-B2bc-ed6a5f83ae4f\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("00996617-4fb9-4a92-b3ce-594ab5c4a325"))
                .body("'responsePadding'", containsString("FmARJ78CWFdP6Bi"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_4.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .header("cwa-fake", "6Cp8H6QMYM_u")
                .header("X-B3-Flags", "1")
                .header("b3", "_EM_496_XYZ_")
                .header("X-B3-Sampled", "Kn1EeAmdu")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"52ca81a7-af01-498a-a56a-d0b77bcb7dd3\", " + 
                    " \"responsePadding\": \"_EM_217_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a42ee27a-c715-421f-B4bb-ea5740be6dda\", " + 
                    " \"responsePadding\": \"_EM_1526_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "RK")
                .header("X-B3-Flags", "qbwD7CRGqikHJ")
                .header("b3", "eUT_KGK")
                .header("x-b3-traceid", "fd4JdIz")
                .header("X-B3-Sampled", "_EM_1527_XYZ_")
                .header("X-B3-TraceId", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"bc20c271-a7a6-45ae-bc0c-b4fabe2baf2b\", " + 
                    " \"responsePadding\": \"KvjfHv7Od\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_13_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-1087")
                .d("CREATED_AT", "\"1991-04-05 20:05:59\"")
                .d("UPDATED_AT", "\"2000-08-31 11:29:13\"")
                .d("VALID_FROM", "\"2030-06-15 11:32:17\"")
                .d("VALID_UNTIL", "\"1940-03-12 04:29:28\"")
                .d("TAN_HASH", "\"45a08e148e8226e3b8ed3dabc35a63b0a4d1f69924e002193b33c2d90ced7567\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "124780544")
                .d("CREATED_AT", "\"2063-12-23 07:37:53\"")
                .d("UPDATED_AT", "\"1993-01-09 02:27:29\"")
                .d("VALID_FROM", "\"1948-06-29 08:38:52\"")
                .d("VALID_UNTIL", "\"2000-08-16 11:20:27\"")
                .d("TAN_HASH", "\"07a3154b52ed7333f4f5079dd1481895ad270d29a219f9a271a9fe66c315f896\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "8328")
                .d("CREATED_AT", "\"2000-06-03 00:48:36\"")
                .d("UPDATED_AT", "\"2004-11-12 11:29:29\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"ei\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"B10eb73D2ccc5C310eebBBEFbFdbBcc9EAc5a879Deb7AECF2DE7D3fa4eC98A2e\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "1052825")
                .d("CREATED_AT", "\"2000-04-02 03:29:29\"")
                .d("UPDATED_AT", "\"2000-04-18 03:29:00\"")
                .d("HASHED_GUID", "\"_EM_13107_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_490_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EUU320U_UY[_R\"")
                .d("TAN_COUNTER", "-8192")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"ebACd3B4ABAbfeF00dF8E10aa07BFE09cafA6E007DB77BAaFFc11d5e9Cc931fE\"")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "-2097152")
                .d("CREATED_AT", "\"2002-07-14 13:29:29\"")
                .d("UPDATED_AT", "\"2028-01-05 17:29:29\"")
                .d("HASHED_GUID", "\"ebACd3B4ABAbfeF00dF8E10aa07BFE09cafA6E007DB77BAaFFc11d5e9Cc931fE\"")
                .d("REGISTRATION_TOKEN_HASH", "\"j\"")
                .d("TELE_TAN_HASH", "\"_EM_13108_XYZ_\"")
                .d("TAN_COUNTER", "65536")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1662946544")
                .d("CREATED_AT", "\"2048-01-23 11:29:29\"")
                .d("UPDATED_AT", "\"1932-06-03 20:30:27\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"ad42b0955b4783bb998c47a632f3227f5592e52da81b4a742e5a1dcc9bb32ba5\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "32768")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "N0")
                .header("X-B3-Flags", "_EM_12848_XYZ_")
                .header("b3", "A")
                .header("X-B3-Sampled", "FALSE")
                .header("X-B3-TraceId", "_EM_12849_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"7b4f5c97e389166425a334ebeaf70610923c65dcdb58401e2de8bd312c1c13d5\", " + 
                    " \"keyDob\": \"B10eb73D2ccc5C310eebBBEFbFdbBcc9EAc5a879Deb7AECF2DE7D3fa4eC98A2e\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"c3d745cd-9efe-414d-Ad02-78ad1036681f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"s<M_@206_XWZK\"}")
                .header("X-B3-Sampled", "_EM_487_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "_EM_488_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9")
                .header("X-B3-Sampled", "TrUE")
                .header("X-B3-TraceId", "_EM_13105_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d910-4f60-Bd7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("X-B3-Flags", "fgo")
                .header("X-B3-Sampled", "tRue")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"88535369-5797-4398-b4ad-ec6b4e75bd5c\", " + 
                    " \"responsePadding\": \"3Vm_epGHScH_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "6Cp8H6QMYM_u")
                .header("X-B3-Flags", "1")
                .header("b3", "z3D1FLP3TM1")
                .header("X-B3-TraceId", "lxbt_VxuTF13T")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-a011-498b-946a-c0c76cd97de3\", " + 
                    " \"responsePadding\": \"_EM_13106_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_14_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-56")
                .d("CREATED_AT", "\"2100-12-09 17:17:52\"")
                .d("UPDATED_AT", "\"2020-01-21 05:00:17\"")
                .d("VALID_FROM", "\"2038-07-23 23:31:17\"")
                .d("VALID_UNTIL", "\"1936-01-12 02:57:21\"")
                .d("TAN_HASH", "\"_EM_219_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2063-12-23 14:39:43\"")
                .d("UPDATED_AT", "\"1936-01-17 02:30:02\"")
                .d("VALID_FROM", "\"1950-12-31 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-02-01 04:21:59\"")
                .d("TAN_HASH", "\"bcf8a45ad2a81e0b521630c0a27bce1f5a96fb657b9da21bfd7719b542de9281\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "131072")
                .d("CREATED_AT", "\"1909-07-03 00:48:36\"")
                .d("UPDATED_AT", "\"2031-11-13 15:16:59\"")
                .d("HASHED_GUID", "\"_EM_1924_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"\"")
                .d("TELE_TAN_HASH", "\"waO29NE\"")
                .d("TAN_COUNTER", "67109438")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1925_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "151")
                .d("CREATED_AT", "\"2049-06-16 09:48:30\"")
                .d("UPDATED_AT", "\"2045-12-03 13:49:56\"")
                .d("HASHED_GUID", "\"_EM_1926_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWusts\"")
                .d("TELE_TAN_HASH", "\"_EM_1927_XYZ_\"")
                .d("TAN_COUNTER", "4194377")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"mutGl\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "756140240")
                .d("CREATED_AT", "\"2055-03-03 01:20:19\"")
                .d("UPDATED_AT", "\"2012-05-05 09:03:29\"")
                .d("HASHED_GUID", "\"rp_MO0Aubgyt5\"")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"UOC32Jxrgw9m\"")
                .d("TAN_COUNTER", "722")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678976")
                .d("CREATED_AT", "\"2048-04-27 10:06:59\"")
                .d("UPDATED_AT", "\"1932-10-03 20:29:32\"")
                .d("HASHED_GUID", "\"_EM_1928_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"ad42b0955b4783bb998c47a632f3227f5592e52da81b4a742e5a1dcc9bb32ba5\"")
                .d("TELE_TAN_HASH", "\"_EM_223_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_289_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_1859_XYZ_")
                .header("X-B3-Flags", "gJ")
                .header("b3", "_EM_1918_XYZ_")
                .header("X-B3-Sampled", "_EM_1919_XYZ_")
                .header("X-B3-TraceId", "_EM_211_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"RDVNP4SJZ2\", " + 
                    " \"keyDob\": \"A2edb94B2ddb6C310eebCBFEbEeaBdcAEBd5a669Dec99DCF3EF6E4fa4fBA6A3e\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "NNJPz8A4dD")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9aea84b-2dbd-48ec-917e-ecc5040bbc23\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_1920_XYZ_\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("P7ZZ8UFQ9B"));
        
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_1920_XYZ_\"}")
                .header("x-b3-sampled", "LVZt")
                .header("b3", "lTE")
                .header("X-B3-Sampled", "TCMrwqi4O8Z20")
                .header("cwa-fake", "6eRIYc2Ke")
                .header("X-B3-Flags", "_EM_1861_XYZ_")
                .header("x-b3-flags", "ll3ygXm7p")
                .header("X-CWA-TELETAN-TYPE", "_EM_1921_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9x")
                .header("b3", "_EM_1862_XYZ_")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d900-4f60-9c6d-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_283_XYZ_")
                .header("X-B3-Flags", "foo")
                .header("X-B3-TraceId", "_EM_1922_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424487-5596-4399-B2bc-ed6a5f83ae4f\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("X-B3-Flags", "RBHljXEhR4AH8B")
                .header("b3", "z3D1FLP3TM1W")
                .header("X-B3-TraceId", "_EM_1923_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-9011-488a-a45a-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"_EM_217_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_15_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-8960")
                .d("CREATED_AT", "\"2000-06-14 19:29:29\"")
                .d("UPDATED_AT", "\"1900-07-29 05:26:57\"")
                .d("VALID_FROM", "\"2046-06-23 00:00:49\"")
                .d("VALID_UNTIL", "\"1942-07-20 00:57:13\"")
                .d("TAN_HASH", "\"_EM_2034_XYZ_p\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "8388608")
                .d("CREATED_AT", "\"2063-06-01 11:29:29\"")
                .d("UPDATED_AT", "\"1929-01-05 01:33:08\"")
                .d("VALID_FROM", "\"1948-04-29 00:38:20\"")
                .d("VALID_UNTIL", "\"2000-08-15 00:29:29\"")
                .d("TAN_HASH", "\"6ce70206eb9249fa819c18eeeb3c615b06d2a93721a71698f256661f5bfdfd6f\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1909-01-01 20:52:20\"")
                .d("UPDATED_AT", "\"2000-11-16 15:16:29\"")
                .d("HASHED_GUID", "\"_EM_1442_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8b6b6af2171cb498100fca68fc3daa25e485f413545ca9f24d97a6d6450609a7\"")
                .d("TELE_TAN_HASH", "\"_EM_2548_XYb_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "-32")
                .d("CREATED_AT", "\"2007-01-16 13:29:24\"")
                .d("UPDATED_AT", "\"2000-01-08 07:29:41\"")
                .d("HASHED_GUID", "\"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"_EM_5968_XYZ_\"")
                .d("TAN_COUNTER", "-1975")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"muvGj\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "747734096")
                .d("CREATED_AT", "\"1984-10-24 15:29:29\"")
                .d("UPDATED_AT", "\"2012-10-05 10:29:00\"")
                .d("HASHED_GUID", "\"stJNvODG\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"eaDnisVcngurZpj\"")
                .d("TAN_COUNTER", "-126976")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"YdeBMXY82GkTP\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-4096")
                .d("CREATED_AT", "\"2080-01-31 11:06:33\"")
                .d("UPDATED_AT", "\"1932-12-03 04:00:29\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"ad42b0955b4783bb998c47a632f3227f5592e52da81b4a742e5a1dcc9bb32ba5\"")
                .d("TELE_TAN_HASH", "\"_EM_9685_XYZ_\"")
                .d("TAN_COUNTER", "-6422528")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "y03Vv9Gkl")
                .header("X-B3-Flags", "_EM_48$_XYZ_w")
                .header("b3", "_UUU1<50UXUZ_F")
                .header("X-B3-Sampled", "fAlSE")
                .header("X-B3-TraceId", "NyEvEDUEmS\\EbY")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"fFB9d4869BBb0cFd0fF9F20ab17ACDe9baf85F215EA77C9bDFd14c5b8Db73fbE\", " + 
                    " \"keyDob\": \"A3eea82C3ccb7C211ddbBAFDbFeaBebAC9f5c669Deb8CDDF3FF5E3eF5eA8594f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("79c9264c-1361-47f8-8950-5548d0adb8b9"))
                .body("'responsePadding'", containsString("5"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("b3", "_EM_584_XYZ_")
                .header("X-B3-TraceId", "9")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"613b2b50-cd41-4ae2-ad16-c07e6dc05490\", " + 
                    " \"responsePadding\": \"T\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"5zAB3LcNM4\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "FAlSE")
                .header("X-B3-TraceId", "gYMohl2")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("VPP9BYKSZG"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9")
                .header("b3", "_EM_13618_XYZ_")
                .header("X-B3-Sampled", "nMb")
                .header("X-B3-TraceId", "RP4")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d370d-d900-4e60-8d7e-67694a5aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("X-B3-Flags", "_EM_2145_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"79513378-5797-42a9-B3ab-dd8c4e85ae30\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("b3", "_EM_5967_XYZ_")
                .header("X-B3-Sampled", "_EM_2147_XYZ_")
                .header("X-B3-TraceId", "_EM_587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"51cb80a8-9011-4a9b-a24b-cfc67bcb5ed1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("08b16dfe-1d3c-497a-9ed8-dd25fee0ac6e"))
                .body("'responsePadding'", containsString("AcEZlx07oi7YnqA"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d59ae1ca-b749-40b6-a0c7-98df49d3e49e\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/controller/ExternalTestStateController_112_getTestState
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    @Test @Timeout(60)
    public void test_16_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 6L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1964-11-09 16:14:13\"")
                .d("UPDATED_AT", "\"1926-11-23 15:04:26\"")
                .d("HASHED_GUID", "\"_EM_30_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4658d2193600688be424252146e27bab8dc7d62d9a1949b802d5eee8fee457be\"")
                .d("TELE_TAN_HASH", "\"_EM_19_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_98_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 7L)
                .d("VERSION", "-286")
                .d("CREATED_AT", "\"2000-06-13 15:49:29\"")
                .d("UPDATED_AT", "\"2100-09-24 20:59:05\"")
                .d("HASHED_GUID", "\"XPXn\"")
                .d("REGISTRATION_TOKEN_HASH", "\"84yQ\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "16388")
                .d("SOT", "\"_EM_99_XYZ_\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"p\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "XuxJUt2SDvzMy")
                .header("X-B3-Flags", "foo")
                .header("b3", "o2KU_TJDCyU")
                .header("X-B3-Sampled", "_EM_28_XYZ_")
                .header("X-B3-TraceId", "_EM_97_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a499ae91-8cac-4dbc-bf0e-0703fc7cb23c\", " + 
                    " \"responsePadding\": \"_EM_17_XYZ_2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_17_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 98L)
                .d("VERSION", "-5047056217005712030")
                .d("CREATED_AT", "\"2067-08-01 02:21:14\"")
                .d("UPDATED_AT", "\"1942-04-01 00:27:45\"")
                .d("VALID_FROM", "\"2016-09-15 12:13:30\"")
                .d("VALID_UNTIL", "\"2008-03-11 04:16:06\"")
                .d("TAN_HASH", "\"_EM_455_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "NULL")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 99L)
                .d("VERSION", "131261")
                .d("CREATED_AT", "\"2030-08-01 02:14:48\"")
                .d("UPDATED_AT", "\"2054-04-22 15:55:17\"")
                .d("VALID_FROM", "\"1906-11-28 07:05:00\"")
                .d("VALID_UNTIL", "\"1926-07-22 09:00:03\"")
                .d("TAN_HASH", "\"d25a2b917f986e58fda8d984c7bbbad060c3d064640615be87487a3c96e82563\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "NULL")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("TAN", 100L)
                .d("VERSION", "262939")
                .d("CREATED_AT", "\"1944-09-08 04:59:30\"")
                .d("UPDATED_AT", "\"1945-01-02 11:00:10\"")
                .d("VALID_FROM", "\"2054-11-23 05:18:11\"")
                .d("VALID_UNTIL", "\"1917-12-26 12:46:35\"")
                .d("TAN_HASH", "\"Tt28sKQCBM4\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 101L)
                .d("VERSION", "8744")
                .d("CREATED_AT", "\"2091-09-11 12:25:26\"")
                .d("UPDATED_AT", "\"1976-03-29 15:06:57\"")
                .d("HASHED_GUID", "\"J4VKwTsLi2\"")
                .d("REGISTRATION_TOKEN_HASH", "\"5nXmSuhrOEwerC\"")
                .d("TELE_TAN_HASH", "\"oWPHJ2a0J\"")
                .d("TAN_COUNTER", "-786319")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"vSDU0yr15ctIg86\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 102L)
                .d("VERSION", "1946199897")
                .d("CREATED_AT", "\"2069-04-08 22:23:51\"")
                .d("UPDATED_AT", "\"2066-05-25 06:23:31\"")
                .d("HASHED_GUID", "\"09ZpPCXPjmF8\"")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"\"")
                .d("TAN_COUNTER", "134284146")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"f2nUDOWEpbArVoT\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("X-B3-Flags", "foo")
                .header("b3", "_EM_447_XYZ_")
                .header("X-B3-Sampled", "_EM_390_XYZ_")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyDob\": \"Js0OjPHj\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("X-B3-Flags", "VN")
                .header("b3", "CEx")
                .header("X-B3-Sampled", "o4JeZ5kq1a")
                .header("X-B3-TraceId", "F35uJ-F2J")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"LMKx_xp9StUSzO\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("X-B3-Flags", "_EM_448_XYZ_")
                .header("b3", "tAt8Ff")
                .header("X-B3-TraceId", "_EM_449_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"71f6acd6-b328-4ce7-852d-4baf4d3d013e\", " + 
                    " \"responsePadding\": \"z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_393_XYZ_\"}")
                .header("b3", "_EM_450_XYZ_")
                .header("X-B3-Flags", "_EM_451_XYZ_")
                .header("X-B3-TraceId", "foo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("ERJTN3FJM3"));
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_452_XYZ_\"}")
                .header("b3", "_EM_397_XYZ_")
                .header("X-B3-Flags", "foo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("3EMTRTCGWA"));
        
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_452_XYZ_\"}")
                .header("b3", "KJy2FWhWRj1oE3l")
                .header("X-B3-Flags", "3")
                .header("X-B3-Sampled", "_EM_453_XYZ_")
                .header("X-B3-TraceId", "2bq6QpWKNP5Jz")
                .header("X-CWA-TELETAN-TYPE", "9")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "fagrvqjPb")
                .header("X-B3-Flags", "foo")
                .header("X-B3-Sampled", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"5b9d1c4f-e84f-47a3-837a-d063dbbac7a3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("b3", "JZ7W6vZVvM*N")
                .header("X-B3-Sampled", "AkyquJ5iJfF")
                .header("X-B3-TraceId", "_EM_454_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"53d04599-eedb-41eb-aabd-ee9f121a1b68\", " + 
                    " \"responsePadding\": \"EwgzBIUA2wk\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_18_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "-882160321751145155")
                .d("CREATED_AT", "\"2045-05-09 11:06:19\"")
                .d("UPDATED_AT", "\"1921-12-10 02:02:59\"")
                .d("VALID_FROM", "\"2030-09-19 06:59:15\"")
                .d("VALID_UNTIL", "\"1980-05-15 20:56:34\"")
                .d("TAN_HASH", "\"_EM_718_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "-6291182")
                .d("CREATED_AT", "\"1938-05-16 00:25:55\"")
                .d("UPDATED_AT", "\"1900-09-03 14:54:32\"")
                .d("VALID_FROM", "\"2071-10-27 22:59:59\"")
                .d("VALID_UNTIL", "\"1933-05-31 00:30:15\"")
                .d("TAN_HASH", "\"BUgK7M\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-16384")
                .d("CREATED_AT", "\"2000-10-01 11:29:12\"")
                .d("UPDATED_AT", "\"1937-09-16 22:50:17\"")
                .d("VALID_FROM", "\"1938-08-19 16:09:42\"")
                .d("VALID_UNTIL", "\"1947-07-21 00:29:52\"")
                .d("TAN_HASH", "\"b9888d6f9fa2bc2f8810188bf8476886c4223f7bd36c5952ea388b506ea7d4f7\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "331341898")
                .d("CREATED_AT", "\"2000-11-16 16:29:44\"")
                .d("UPDATED_AT", "\"1900-10-01 06:54:28\"")
                .d("VALID_FROM", "\"2035-05-31 23:36:31\"")
                .d("VALID_UNTIL", "\"1963-06-16 01:06:56\"")
                .d("TAN_HASH", "\"9d6154e3d5e6b2ea40f16ac738816a7e1864121c05fdc35106233f79c3a4c3dc\"")
                .d("SOT", "\"_EM_999_XYZ_\"")
                .d("TYPE", "\"Q\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "NULL")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2094-12-10 12:01:36\"")
                .d("UPDATED_AT", "\"2000-01-16 11:25:12\"")
                .d("HASHED_GUID", "\"FZ1Zkh\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_1000_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_1001_XYZ_\"")
                .d("TAN_COUNTER", "535888155")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"WKqeQC\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "923")
                .d("CREATED_AT", "\"1900-04-19 14:53:07\"")
                .d("UPDATED_AT", "\"1997-12-08 11:07:29\"")
                .d("HASHED_GUID", "\"n\"")
                .d("REGISTRATION_TOKEN_HASH", "\"dd4a7c6141c8d5ba9b034fef88096fce508c64e2062ddec1392340372665942b\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "-32")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"F6kGtk\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "819")
                .d("CREATED_AT", "\"1978-06-29 05:01:38\"")
                .d("UPDATED_AT", "\"2000-09-16 18:17:34\"")
                .d("HASHED_GUID", "\"_EM_721_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"_EM_1002_XYZ_\"")
                .d("TAN_COUNTER", "67108864")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"vUbYQEpyRj\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "nLBS2ge9bT7f1j")
                .header("X-B3-Flags", "_EM_994_XYZ_")
                .header("b3", "_EM_995_XYZ_")
                .header("X-B3-Sampled", "_EM_996_XYZ_")
                .header("X-B3-TraceId", "_EM_68_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"V7V\", " + 
                    " \"keyDob\": \"_EM_410_XYZ_\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("b3", "F=")
                .header("X-B3-Sampled", "_EM_69_XYZ_")
                .header("X-B3-TraceId", "MlbcctJmhC7")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"633c2b50-ad21-4af1-9fd6-cf5a7cf14381\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"6Qj2eh\"}")
                .header("X-B3-Flags", "a3hG")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("BR3WDVDNN7"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "_EM_997_XYZ_")
                .header("X-B3-Sampled", "BG4Tz5")
                .header("X-B3-TraceId", "_EM_71_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d481d-da00-406f-ad6e-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("X-B3-Flags", "_EM_72_XYZ_")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97414478-4597-44a8-b1ad-ec4a4e75ae4f\", " + 
                    " \"responsePadding\": \"_EM_414_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_413_XYZ_")
                .header("b3", "z3D1FLP3TM1W")
                .header("X-B3-Sampled", "Kn1EeAmdu")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-8012-488a-A45a-d0d76bbb6de2\", " + 
                    " \"responsePadding\": \"_EM_998_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "B1VcVDV4LX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"54d28eca-a1dd-4120-92dc-12c467cbb7b8\", " + 
                    " \"responsePadding\": \"_EM_415_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        
        given().accept("*/*")
                .header("cwa-fake", "B1VcVDV4LX")
                .header("X-B3-Flags", "gPmvfzqywNzpTRQ8")
                .header("b3", "rqNwpOx9")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"fb630bed-beb8-45ac-8d9e-ab50e41dbf0d\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(500) // app/coronawarn/verification/service/TestResultServerService_49_result
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    @Test @Timeout(60)
    public void test_19_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("X-B3-TraceId", "v_7pTMPGKp0j4CD")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"MVqnx\", " + 
                    " \"keyDob\": \"M\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-TraceId", "MlbcctJmhC7")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"633d2b50-bd32-4ae2-8de5-de6b7ce04381\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_qp\"}")
                .header("X-B3-Sampled", "")
                .header("X-CWA-TELETAN-TYPE", "xqD0XRDVI9k")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d481d-da00-4f6f-9d6d-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkOG")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97414478-5596-44a8-B2bc-ec5a5e84bd4f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkOG")
                .header("X-B3-Flags", "6fWOA9lVqyLIc")
                .header("b3", "z3D1FLP3TM1W")
                .header("X-B3-TraceId", "nRI_WJv")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-9011-488a-a45a-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"km2Cc5uGSJ_WJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_20_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"1995-04-05 11:13:59\"")
                .d("UPDATED_AT", "\"2020-03-29 05:00:16\"")
                .d("VALID_FROM", "\"2030-06-15 06:00:17\"")
                .d("VALID_UNTIL", "\"1940-07-08 00:57:13\"")
                .d("TAN_HASH", "\"_EM_219_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2063-12-23 11:37:51\"")
                .d("UPDATED_AT", "\"1929-01-01 02:29:16\"")
                .d("VALID_FROM", "\"1948-04-29 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-04-02 04:20:59\"")
                .d("TAN_HASH", "\"_EM_1520_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "285213639")
                .d("CREATED_AT", "\"1909-07-03 00:48:36\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:27\"")
                .d("HASHED_GUID", "\"_EM_1442_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"_EM_1444_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "2200")
                .d("CREATED_AT", "\"2041-04-16 13:29:24\"")
                .d("UPDATED_AT", "\"2041-04-01 12:31:29\"")
                .d("HASHED_GUID", "\"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8260530e9e2c02aa23aa8c988d0eb2f74580d2abd5d210836252cbe3fc236943\"")
                .d("TELE_TAN_HASH", "\"KCt\"")
                .d("TAN_COUNTER", "73")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"mutGl\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "756139088")
                .d("CREATED_AT", "\"2000-06-16 01:29:11\"")
                .d("UPDATED_AT", "\"2012-05-05 09:03:29\"")
                .d("HASHED_GUID", "\"_EM_1521_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"4CdsBeqPX9j5\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1446_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1667124528")
                .d("CREATED_AT", "\"2048-01-31 12:06:33\"")
                .d("UPDATED_AT", "\"1932-06-03 20:31:27\"")
                .d("HASHED_GUID", "\"_EM_491_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"ad42b0955b4783bb998c47a632f3227f5592e52da81b4a742e5a1dcc9bb32ba5\"")
                .d("TELE_TAN_HASH", "\"sZACZYCJIq9z4\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_483_XYZ_")
                .header("X-B3-Flags", "_EM_484_XYZ_s")
                .header("b3", "_EM_1440_XYZ_")
                .header("X-B3-Sampled", "urfCD")
                .header("X-B3-TraceId", "w")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\", " + 
                    " \"keyDob\": \"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("b3", "_EM_584_XYZ_")
                .header("X-B3-TraceId", "MlbcctJmhC7")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"623d1b50-cd41-4ad2-9d16-c06d6ddf5371\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("X-B3-Sampled", "_EM_487_XYZ_")
                .header("X-B3-TraceId", "gUMohl2")
                .header("X-CWA-TELETAN-TYPE", "_EM_488_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9")
                .header("b3", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d910-4f60-Bd7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "6Cp8H6QMYM_u")
                .header("b3", "foo")
                .header("X-B3-TraceId", "C")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424378-5697-4399-b3bc-ed6b5f74ae5e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "1")
                .header("X-B3-TraceId", "_EM_587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-9011-498a-945a-cfc66cca6dd2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("f2fcfcd3-ecb0-4d96-9c83-ca9ca49315d7"))
                .body("'responsePadding'", containsString("l8Pjk8B10mWF3h8"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_21_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1995-04-05 11:13:59\"")
                .d("UPDATED_AT", "\"2020-03-29 05:00:16\"")
                .d("VALID_FROM", "\"2046-05-23 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-09-08 00:57:13\"")
                .d("TAN_HASH", "\"_EM_219_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "-917042")
                .d("CREATED_AT", "\"2063-12-23 15:37:51\"")
                .d("UPDATED_AT", "\"1929-06-16 02:29:16\"")
                .d("VALID_FROM", "\"1948-04-29 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-04-02 04:20:59\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmak\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "285213639")
                .d("CREATED_AT", "\"1909-07-03 00:48:36\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:27\"")
                .d("HASHED_GUID", "\"_EM_1442_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_1443_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_1444_XYZ_\"")
                .d("TAN_COUNTER", "-16776642")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "2200")
                .d("CREATED_AT", "\"2041-12-16 17:29:28\"")
                .d("UPDATED_AT", "\"2041-04-01 11:29:29\"")
                .d("HASHED_GUID", "\"_EM_1445_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8260530e9e2c02aa23aa8c988d0eb2f74580d2abd5d210836252cbe3fc236943\"")
                .d("TELE_TAN_HASH", "\"KCt\"")
                .d("TAN_COUNTER", "73")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"mutGl\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "756138064")
                .d("CREATED_AT", "\"2000-06-16 01:29:11\"")
                .d("UPDATED_AT", "\"2012-05-05 09:03:29\"")
                .d("HASHED_GUID", "\"rp_MO0Aubgyt5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"j\"")
                .d("TELE_TAN_HASH", "\"_EM_589_XYZ_\"")
                .d("TAN_COUNTER", "201327314")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_1446_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1667124528")
                .d("CREATED_AT", "\"2048-01-31 11:06:29\"")
                .d("UPDATED_AT", "\"1900-06-01 20:29:29\"")
                .d("HASHED_GUID", "\"_EM_491_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"_EM_591_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_592_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "_EM_483_XYZ_")
                .header("X-B3-Flags", "_EM_484_XYZ_s")
                .header("b3", "_EM_1440_XYZ_")
                .header("X-B3-Sampled", "urfCD")
                .header("X-B3-TraceId", "_EM_485_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\", " + 
                    " \"keyDob\": \"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("dfb3a77a-e62b-4748-ab2d-67952b0eae98"))
                .body("'responsePadding'", containsString("1"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-Sampled", "_EM_1441_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"623d1b50-cd41-4ad2-9d16-c06d6ddf5371\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("X-B3-Sampled", "_EM_487_XYZ_")
                .header("X-B3-TraceId", "gUMohl2")
                .header("X-CWA-TELETAN-TYPE", "_EM_488_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(500) // app/coronawarn/verification/config/RequestSizeLimitFilter_60_doFilterInternal
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9x")
                .header("b3", "foo")
                .header("X-B3-Sampled", "_EM_489_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d910-4f60-Bd7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("b3", "foo")
                .header("X-B3-TraceId", "_EM_285_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424487-5697-4399-b2bc-ed6b5f74ae5e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("X-B3-Flags", "1")
                .header("X-B3-TraceId", "_EM_587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-9011-498a-945a-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"_EM_217_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_22() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "1")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"5ced2cb4-a37d-4caa-acd4-f39ac4f3a74d\", " + 
                    " \"responsePadding\": \"DraaptTH\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.68272979E9))
                .body("'responsePadding'", containsString("SdD16yYZl4rxaEGOvKl379EsUO46NuVrXySLjz0Hkfnsg"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_23() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1963-06-19 23:17:52\"")
                .d("UPDATED_AT", "\"2000-01-21 09:13:29\"")
                .d("VALID_FROM", "\"2038-07-17 11:47:18\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2095-02-23 09:31:45\"")
                .d("UPDATED_AT", "\"1926-05-05 02:27:02\"")
                .d("VALID_FROM", "\"1936-06-01 00:54:04\"")
                .d("VALID_UNTIL", "\"1968-04-16 20:37:29\"")
                .d("TAN_HASH", "\"XYveg8Ry1uKgQmak\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-11-05 17:17:51\"")
                .d("HASHED_GUID", "\"UMURkUz6Ugu\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9133be1e4785a382bc5add04a03b034d398c2079b16d07f10403597dc3015f94\"")
                .d("TELE_TAN_HASH", "\"waO29NE\"")
                .d("TAN_COUNTER", "1049089")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"OYN38fNovhOeWokX\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-18 17:31:37\"")
                .d("UPDATED_AT", "\"2016-06-01 13:33:29\"")
                .d("HASHED_GUID", "\"_EM_3156_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_23943_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_23944_XYZ_\"")
                .d("TAN_COUNTER", "-33520551")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_23229_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "890356848")
                .d("CREATED_AT", "\"2054-11-03 03:16:29\"")
                .d("UPDATED_AT", "\"2000-01-23 07:06:00\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_23230_XYZ_\"")
                .d("TELE_TAN_HASH", "\"4UpynyXw\"")
                .d("TAN_COUNTER", "972")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"o6\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700662256")
                .d("CREATED_AT", "\"2000-04-14 11:06:58\"")
                .d("UPDATED_AT", "\"1900-02-03 20:15:29\"")
                .d("HASHED_GUID", "\"UEM_UU232_XYZUW\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "\"muKx\"")
                .d("TAN_COUNTER", "-8")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3159_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "JOJEBUUN")
                .header("b3", "_EM_23898_XYZ_")
                .header("X-B3-Sampled", "faLSe")
                .header("X-B3-TraceId", "1HqRNEJ51QvyzT6")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"17c2e6cf4f6da6755476fccf73d13dd4a0113c9d772f2adb75c9a95184182df7\", " + 
                    " \"keyDob\": \"A3edc94B2bea6C301eebBCFEbDeaCdbCECd5a578CecA9DDa3DF6D4fa40C96A3e\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        assertNotNull(wireMock__TCP__cwa_testresult_server__8088);
        wireMock__TCP__cwa_testresult_server__8088.stubFor(
            post(urlEqualTo("/api/v1/app/result"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(204)
                    .withBody("\"_EM_23899_XYZ_\"")
                )
        );
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("cwa-fake", "NNJPz8A4dD")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(9.55710418E8))
                .body("'responsePadding'", containsString("dPnpwbyutLapDim0WZyUTazEWhU1mV2GlD7Fgda4W3aUP"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        wireMock__TCP__cwa_testresult_server__8088.resetAll();
        DnsCacheManipulator.clearDnsCache();
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_g\"}")
                .header("b3", "_EM_23942_XYZ_")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "_EM_3154_XYZ_")
                .header("X-B3-TraceId", "_EM_23228_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("BM6VCVDBF9"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"a9a5a663-aaa7-48b6-B00c-368c8bc6fe8d\", " + 
                    " \"responsePadding\": \"OrYTCrtc2u\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("X-B3-Flags", "")
                .header("b3", "g")
                .header("x-b3-traceid", "Tlixq_sh")
                .header("X-B3-Sampled", "TWJfzWcfc0v")
                .header("X-B3-TraceId", "wmmji0Hnx")
                .header("cwa-fake", "wnMVnhUL")
                .header("x-b3-flags", "FI_iZvsEezrx_5c")
                .header("X-CWA-TELETAN-TYPE", "85ZDddQ0rb")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"7eca615e-5bca-4cda-bf9b-d15c32084312\", " + 
                    " \"responsePadding\": \"TKFcW95lVt6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
        
        given().accept("*/*")
                .header("cwa-fake", "BX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4dc9-a6af-c9babb2c4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeWokX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_24() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "524256")
                .d("CREATED_AT", "\"1992-06-07 23:06:34\"")
                .d("UPDATED_AT", "\"2008-06-20 02:28:29\"")
                .d("VALID_FROM", "\"1950-02-03 03:29:15\"")
                .d("VALID_UNTIL", "\"1982-12-16 18:58:26\"")
                .d("TAN_HASH", "\"b9888d6f9fa2bc2f8810188bf8476886c4223f7bd36c5952ea388b506ea7d4f7\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "23068890")
                .d("CREATED_AT", "\"2032-06-19 05:19:29\"")
                .d("UPDATED_AT", "\"2000-08-03 11:42:29\"")
                .d("VALID_FROM", "\"2032-01-16 13:29:29\"")
                .d("VALID_UNTIL", "\"1933-05-24 00:00:29\"")
                .d("TAN_HASH", "\"T3sqTdBc3KzhM5D\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-131072")
                .d("CREATED_AT", "\"1900-01-17 02:46:20\"")
                .d("UPDATED_AT", "\"1931-10-07 22:29:29\"")
                .d("VALID_FROM", "\"2000-06-11 17:00:38\"")
                .d("VALID_UNTIL", "\"2064-06-05 11:59:35\"")
                .d("TAN_HASH", "\"a0b71be71d6db2e834af18c19a5715959f47af9febc5964c8812d3a4b29d2ced\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "-65552")
                .d("CREATED_AT", "\"2000-11-15 11:32:48\"")
                .d("UPDATED_AT", "\"2000-12-16 11:59:29\"")
                .d("VALID_FROM", "\"2000-06-16 18:00:29\"")
                .d("VALID_UNTIL", "\"1900-05-04 09:56:57\"")
                .d("TAN_HASH", "\"32f85154a3135b583a7e8f5fa91ab584702c31eb9bb58fd3ebf2f2de0b04285f\"")
                .d("SOT", "\"KsAvzIX5Iy0\"")
                .d("TYPE", "\"_EM_15770_XYZ_\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EMj\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "536870942")
                .d("CREATED_AT", "\"2000-12-12 11:09:29\"")
                .d("UPDATED_AT", "\"2075-01-17 21:54:36\"")
                .d("HASHED_GUID", "\"RQvwF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9ab5eccfa5d0e6b163bc3c1b27c42436ab4236fb9d6712762c60d78db6f2fa7c\"")
                .d("TELE_TAN_HASH", "\"MF246uH_GYUFZH0w\"")
                .d("TAN_COUNTER", "16746496")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"FVyiqM6cz56IywunA\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "-1044994")
                .d("CREATED_AT", "\"1918-05-25 10:53:23\"")
                .d("UPDATED_AT", "\"2000-02-16 07:00:16\"")
                .d("HASHED_GUID", "\"135c8fca672c886ea81ac8464856214cca30e44481958c2335960d7bfeb40362\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_74_XYZ_\"")
                .d("TELE_TAN_HASH", "\"iQU\"")
                .d("TAN_COUNTER", "4225")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_15771_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "33518")
                .d("CREATED_AT", "\"2000-06-27 03:29:54\"")
                .d("UPDATED_AT", "\"2037-01-18 10:25:40\"")
                .d("HASHED_GUID", "\"P\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"_EM_15588_XYZ_\"")
                .d("TAN_COUNTER", "-72")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_15768_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d11ec1d1-f8ae-4da7-aac8-2b199d59dfdf\", " + 
                    " \"responsePadding\": \"QCszxKj\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-Sampled", "_EM_13004_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"743c1b51-be42-4af2-8dc5-cf5c7df14381\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_15766_XYZ_\"}")
                .header("X-B3-Flags", "_EM_15667_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("8FJSQSCZ27"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "_EM_15585_XYZ_")
                .header("X-B3-Sampled", "_EM_15767_XYZ_")
                .header("X-B3-TraceId", "_EM_71_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe3d481d-bb10-4f6f-9d6e-57593c3aa3ae\", " + 
                    " \"responsePadding\": \"_EM_2784_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkSG")
                .header("X-B3-Flags", "1")
                .header("X-B3-Sampled", "_EM_15586_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97514477-4496-44a9-b3ac-fb5a4d649e4f\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkSG")
                .header("X-B3-Flags", "6fWOA9lVqyLIc")
                .header("X-B3-TraceId", "nRI_WJv")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"21ba81a7-a0f1-488a-944a-cfc66cca7dd3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_25() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "-882160321751145155")
                .d("CREATED_AT", "\"2100-05-09 11:30:04\"")
                .d("UPDATED_AT", "\"2000-06-18 06:01:59\"")
                .d("VALID_FROM", "\"1998-01-19 11:59:15\"")
                .d("VALID_UNTIL", "\"1980-05-07 20:24:02\"")
                .d("TAN_HASH", "\"cDgU8eAxm761esU\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1938-03-16 00:29:55\"")
                .d("UPDATED_AT", "\"1909-09-03 14:54:32\"")
                .d("VALID_FROM", "\"2000-06-16 11:59:59\"")
                .d("VALID_UNTIL", "\"1933-05-15 08:22:15\"")
                .d("TAN_HASH", "\"4BYy7x901G4Q\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "-16053")
                .d("CREATED_AT", "\"1912-08-01 02:46:12\"")
                .d("UPDATED_AT", "\"2008-05-05 03:29:15\"")
                .d("VALID_FROM", "\"1938-08-19 16:09:42\"")
                .d("VALID_UNTIL", "\"1948-09-13 11:30:20\"")
                .d("TAN_HASH", "\"_EM_418_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2012-06-30 16:16:32\"")
                .d("UPDATED_AT", "\"1909-10-01 06:54:28\"")
                .d("VALID_FROM", "\"2099-04-28 23:59:31\"")
                .d("VALID_UNTIL", "\"1963-03-08 17:34:56\"")
                .d("TAN_HASH", "\"1b6d1da03b2ce413bd324c06a4613b77e8b81ec14d117716637a5348e070d855\"")
                .d("SOT", "\"_EM_3002_XYZ_\"")
                .d("TYPE", "\"cd@UUUUe\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"CM\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "534790686")
                .d("CREATED_AT", "\"2000-06-16 11:21:13\"")
                .d("UPDATED_AT", "\"2081-01-03 21:25:44\"")
                .d("HASHED_GUID", "\"_EM_3003_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2388_XYZ_\"")
                .d("TELE_TAN_HASH", "\"MF246uH_GYUFZH0\"")
                .d("TAN_COUNTER", "32047386")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"jHwx71c4KI\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "67108864")
                .d("CREATED_AT", "\"1904-04-20 14:21:08\"")
                .d("UPDATED_AT", "\"1999-08-09 11:29:29\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"5d9e34dfcaa48dde773b999ab3183cfcc1bb98973bdf681136b26dd5243a6bd1\"")
                .d("TELE_TAN_HASH", "\"_EM_2993_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"E_2Sb38rwgQqp\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1978-06-29 05:01:38\"")
                .d("UPDATED_AT", "\"2021-01-22 18:19:34\"")
                .d("HASHED_GUID", "\"_EM_3004_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"0d8952c8ddc6de53593f3b18654cec0c34fb79867619d6c56c0d3b58b9a2cdf9\"")
                .d("TELE_TAN_HASH", "\"]EM_4UUUUYU_\"")
                .d("TAN_COUNTER", "-761058677")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_3005_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "1")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"54d29fba-b1ce-4120-92dc-23d457cbb6a7\", " + 
                    " \"responsePadding\": \"_EM_2997_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.682729771E9))
                .body("'responsePadding'", containsString("DJUXdxkOnVFYfhcRkSkCOkfidiuGiVB8QRUAb3OFy5TxL"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .header("b3", "rqNwpOx9")
                .header("X-B3-Sampled", "_EM_2998_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"0b62fced-c0b8-44bd-8e9f-9b50e31dc00c\", " + 
                    " \"responsePadding\": \"z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("X-B3-Flags", "O1S")
                .header("b3", "_EM_2999_XYZ_")
                .header("X-B3-TraceId", "MlbcctJmhC7")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"642c2b51-9d20-4a03-aed5-b05b7b014381\", " + 
                    " \"responsePadding\": \"_EM_2989_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"106M\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "_EM_412_XYZ_")
                .header("X-B3-TraceId", "gUMohl2")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("N9UWYJS9ZC"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("X-B3-Flags", "foo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "_EM_2991_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d481d-db00-4f60-9d7d-57583a4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_413_XYZ_")
                .header("X-B3-Flags", "_EM_72_XYZ_")
                .header("b3", "foq")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97515479-3596-44b9-81bc-cc5b6e95db2e\", " + 
                    " \"responsePadding\": \"_EM_3000_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_413_XYZ_")
                .header("b3", "z3D1FLP3TM1W")
                .header("X-B3-Sampled", "_EM_3001_XYZ_")
                .header("X-B3-TraceId", "nRI_WJv")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41ba8099-9011-488a-a45a-cfc66cca6dd2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "S")
                .header("b3", "NAxJk")
                .header("X-B3-Sampled", "zYhYxjo")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyDob\": \"_EM_410_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_26() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 21L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2045-05-09 11:06:19\"")
                .d("UPDATED_AT", "\"2000-01-16 11:29:29\"")
                .d("VALID_FROM", "\"1998-01-19 06:54:15\"")
                .d("VALID_UNTIL", "\"1980-03-15 04:58:35\"")
                .d("TAN_HASH", "\"95ff230c624f9b7bdcfdd0b2e18280f744016ce3d9ae281aa7f282397fc471fb\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 22L)
                .d("VERSION", "2097362")
                .d("CREATED_AT", "\"1938-05-19 05:23:23\"")
                .d("UPDATED_AT", "\"1909-09-16 11:46:32\"")
                .d("VALID_FROM", "\"2000-06-27 11:29:29\"")
                .d("VALID_UNTIL", "\"2000-01-24 11:30:45\"")
                .d("TAN_HASH", "\"_EM_2269_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "NULL")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 23L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-16 11:46:12\"")
                .d("UPDATED_AT", "\"1900-02-07 11:54:21\"")
                .d("VALID_FROM", "\"2065-08-16 16:09:29\"")
                .d("VALID_UNTIL", "\"2000-09-13 00:29:29\"")
                .d("TAN_HASH", "\"ii\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 24L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1980-11-15 16:16:48\"")
                .d("UPDATED_AT", "\"1910-10-16 06:54:28\"")
                .d("VALID_FROM", "\"1971-06-20 11:29:29\"")
                .d("VALID_UNTIL", "\"1963-03-08 17:38:54\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"_EM_2270_XYZ\"")
                .d("TYPE", "\"_EM_3063_XYZ_\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"Ce\"")
            .and().insertInto("APP_SESSION", 25L)
                .d("VERSION", "-16")
                .d("CREATED_AT", "\"2094-06-16 12:01:36\"")
                .d("UPDATED_AT", "\"2000-06-16 21:25:29\"")
                .d("HASHED_GUID", "\"_EM_2271_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"a1284836b99f9259524e090ee4f5433d0dec39215f579980d9c81d2a7da6dfcd\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "65818")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3064_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 26L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-06-17 14:29:29\"")
                .d("UPDATED_AT", "\"2000-08-16 11:25:27\"")
                .d("HASHED_GUID", "\"n\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"BUgK7M\"")
                .d("TAN_COUNTER", "2097152")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"e9jihtzrSPyI_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 27L)
                .d("VERSION", "755")
                .d("CREATED_AT", "\"1977-06-27 07:09:46\"")
                .d("UPDATED_AT", "\"2021-09-22 23:17:59\"")
                .d("HASHED_GUID", "\"OBIPSKQ92kzqxi\"")
                .d("REGISTRATION_TOKEN_HASH", "\"hhyaLxWl3pT9vF0C\"")
                .d("TELE_TAN_HASH", "\"U\"")
                .d("TAN_COUNTER", "-758961573")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_884_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_3059_XYZ_")
                .header("X-B3-Flags", "hJ")
                .header("b3", "rh")
                .header("X-B3-Sampled", "FALsE")
                .header("X-B3-TraceId", "Y#")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"GVXNUJVCR2\", " + 
                    " \"keyDob\": \"M\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("cwa-fake", "XdukFGLlT")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"dbedabb5-ebe8-485a-A0a9-fd2c0dd4181a\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(3.927528096E9))
                .body("'responsePadding'", containsString("D9kYi44dtUXiWWUWQLZR8PFCaEQ7wfX9Mmp0Lrkcgqjkp"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("b3", "_EM_3060_XYZ_")
                .header("X-B3-TraceId", "_EM_3061_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"633c2b50-bd32-4af2-9dd5-ce6b7ce04381\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"PAz3x7ZZnujqV\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("ZRTRY3BFH8"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "_EM_71_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe5d481d-da00-4f6e-ad6d-57583b4aa39e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkOG")
                .header("X-B3-Flags", "1")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"97414477-5596-4498-b1ab-ec5a5e84bd4f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "1Z3lVgkEkOG")
                .header("X-B3-Flags", "6fWOA9lVqyLIc")
                .header("X-B3-Sampled", "Kn1EeAmdu")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-9f10-498a-935b-ceb77cbb6dc2\", " + 
                    " \"responsePadding\": \"_EM_3062_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_27() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1993-06-16 19:17:52\"")
                .d("UPDATED_AT", "\"2000-01-21 11:29:29\"")
                .d("VALID_FROM", "\"2039-07-17 06:31:17\"")
                .d("VALID_UNTIL", "\"1936-05-12 02:57:21\"")
                .d("TAN_HASH", "\"44021e2478795e488dac31818ce1de38edd504f17b9d56a76eb31b8739d27b49\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2099-02-23 11:31:29\"")
                .d("UPDATED_AT", "\"1926-06-05 02:29:03\"")
                .d("VALID_FROM", "\"1932-05-01 00:54:04\"")
                .d("VALID_UNTIL", "\"1968-04-16 20:29:21\"")
                .d("TAN_HASH", "\"XUvei8Ry1uKgQmak\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "268436423")
                .d("CREATED_AT", "\"1909-07-03 11:29:29\"")
                .d("UPDATED_AT", "\"2031-11-05 15:16:59\"")
                .d("HASHED_GUID", "\"UMURkUz6Ugp\"")
                .d("REGISTRATION_TOKEN_HASH", "\"9133be1e4785a382bc5add04a03b034d398c2079b16d07f10403597dc3015f94\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "513")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_23235_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-08-18 09:29:30\"")
                .d("UPDATED_AT", "\"2000-06-01 13:33:29\"")
                .d("HASHED_GUID", "\"_EM_3156_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"KWusts\"")
                .d("TELE_TAN_HASH", "\"_EM_23236_XYZ_\"")
                .d("TAN_COUNTER", "-33521575")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_23229_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "890356848")
                .d("CREATED_AT", "\"2054-11-03 03:16:29\"")
                .d("UPDATED_AT", "\"2013-01-05 11:01:00\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_23230_XYZ_\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "976")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_3158_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678704")
                .d("CREATED_AT", "\"2000-04-16 11:06:59\"")
                .d("UPDATED_AT", "\"1900-02-03 20:07:34\"")
                .d("HASHED_GUID", "\"_EM_23232_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"3cda56ccaf41211ea675e33efa45a84593a7c33ee319a868ac1d94e367b8f81c\"")
                .d("TELE_TAN_HASH", "\"muOx\"")
                .d("TAN_COUNTER", "2")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_3159_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "lWZEjoaN")
                .header("X-B3-Flags", "1")
                .header("b3", "RAxJk")
                .header("X-B3-Sampled", "FALSE")
                .header("X-B3-TraceId", "_EM_40441_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"XFC42XJ9GS\", " + 
                    " \"keyDob\": \"A2edb94B2ddb6C310eebCBFEbEeaBdcAEBd5a669Dec99DCF3EF6E4fa4fBA6A3e\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        assertNotNull(wireMock__TCP__cwa_testresult_server__8088);
        wireMock__TCP__cwa_testresult_server__8088.stubFor(
            post(urlEqualTo("/api/v1/app/result"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(200)
                    .withBody("{" +
                        "\"testResult\": 299" + 
                        "}"
                    )
                )
        );
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9ada84b-3dcd-48ec-A17e-ecc5040bbc13\", " + 
                    " \"responsePadding\": \"Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(299.0))
                .body("'sc'", numberMatches(0.0))
                .body("'responsePadding'", containsString("bA09NAqmMfgAP2UQPNKy7p54x6YfxzAmAfiOhErPsNdDJ"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        wireMock__TCP__cwa_testresult_server__8088.resetAll();
        DnsCacheManipulator.clearDnsCache();
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_282_XYZ_\"}")
                .header("b3", "lwylTqMeqvML9Gp5_")
                .header("X-B3-Flags", "a3h")
                .header("X-B3-Sampled", "_EM_3154_XYZ_")
                .header("X-B3-TraceId", "_EM_23228_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("GY89VEBVMH"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("b3", "_EM_23234_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fd4e481d-d900-4f6f-9d6d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "BX")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"1dc3fa9d-8eaa-4dc9-a6af-c9babb2c4e9f\", " + 
                    " \"responsePadding\": \"OYN38fNovhOeWok\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_28() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 17L)
                .d("VERSION", "2048")
                .d("CREATED_AT", "\"1945-06-13 09:16:09\"")
                .d("UPDATED_AT", "\"2034-07-26 07:13:54\"")
                .d("HASHED_GUID", "\"-\"")
                .d("REGISTRATION_TOKEN_HASH", "\"K1Vlcnc\"")
                .d("TELE_TAN_HASH", "\"_EM_3281_XYZ_\"")
                .d("TAN_COUNTER", "1390")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 18L)
                .d("VERSION", "-134217728")
                .d("CREATED_AT", "\"1916-04-30 23:00:32\"")
                .d("UPDATED_AT", "\"1996-01-16 00:30:59\"")
                .d("HASHED_GUID", "\"_EM_3517_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"94bbc3d47557a1baea059315d9ae239975d4d47552a740a5e6d5f9f7619e750d\"")
                .d("TELE_TAN_HASH", "\"TINYINT\"")
                .d("TAN_COUNTER", "-261972")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"qRDs01fMu\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 19L)
                .d("VERSION", "-8387921")
                .d("CREATED_AT", "\"2055-06-18 13:29:29\"")
                .d("UPDATED_AT", "\"2054-12-03 21:32:57\"")
                .d("HASHED_GUID", "\"u5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"6451a7070f17ef7a95963fe2a7ed59bd1669eff8005ce6d5ca87ed4a49307677\"")
                .d("TELE_TAN_HASH", "\"_EM_3282_XYZ_e\"")
                .d("TAN_COUNTER", "-4193569")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_1619_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("X-B3-Flags", "1")
                .header("b3", "2b3")
                .header("X-B3-Sampled", "falSE")
                .header("X-B3-TraceId", "_EM_3514_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"4cfff830-aeec-4bbf-b238-e0e23e7daa18\", " + 
                    " \"responsePadding\": \"JPudDgTfql9p0m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("X-B3-Flags", "_EM_3515_XYZ_")
                .header("b3", "_EM_3516_XYZ_")
                .header("X-B3-Sampled", "_EM_3275_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"e0db6854-7527-4672-a8be-111a36c654ca\", " + 
                    " \"responsePadding\": \"PfwI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("e846e439-f6c2-41f3-a752-bb24898c80f0"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_29() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1995-04-09 19:17:52\"")
                .d("UPDATED_AT", "\"2016-01-21 05:00:16\"")
                .d("VALID_FROM", "\"2038-07-23 06:31:17\"")
                .d("VALID_UNTIL", "\"1968-12-10 02:57:21\"")
                .d("TAN_HASH", "\"_EM_219_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2062-12-23 14:39:43\"")
                .d("UPDATED_AT", "\"1929-07-05 02:29:00\"")
                .d("VALID_FROM", "\"1948-04-29 00:29:29\"")
                .d("VALID_UNTIL", "\"1941-06-01 11:29:59\"")
                .d("TAN_HASH", "\"XYvew8Ry1uKgQmak\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1909-07-03 00:48:36\"")
                .d("UPDATED_AT", "\"2039-09-07 15:16:59\"")
                .d("HASHED_GUID", "\"fjt\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_963_XYZ_\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "574")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_964_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "151")
                .d("CREATED_AT", "\"2049-08-01 09:59:31\"")
                .d("UPDATED_AT", "\"2045-12-03 13:49:56\"")
                .d("HASHED_GUID", "\"_EM_965_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_966_XYZ_\"")
                .d("TELE_TAN_HASH", "\"KCh\"")
                .d("TAN_COUNTER", "73")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "756139088")
                .d("CREATED_AT", "\"2055-03-03 01:20:11\"")
                .d("UPDATED_AT", "\"2028-05-13 09:03:29\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"cUU_2UU_UiU_\"")
                .d("TAN_COUNTER", "722")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"Bu0tKO2jFrT\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-1700678960")
                .d("CREATED_AT", "\"2048-04-27 10:06:27\"")
                .d("UPDATED_AT", "\"1900-06-01 04:39:29\"")
                .d("HASHED_GUID", "\"5XZyrWLby\"")
                .d("REGISTRATION_TOKEN_HASH", "\"47f7ade056afa69ab7d277bc4fdefdc6e9eebc8f63735f74e9d8c353d04992ac\"")
                .d("TELE_TAN_HASH", "\"_EM_223_XYZ_\"")
                .d("TAN_COUNTER", "520")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_967_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_956_XYZ_")
                .header("X-B3-Flags", "gJ")
                .header("b3", "_EM_957_XYZ_")
                .header("X-B3-Sampled", "faLSe")
                .header("X-B3-TraceId", "I5pFCxWAfW")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"RDVNP4SJZ2\", " + 
                    " \"keyDob\": \"_EM_209_XYZ_\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f9aea84b-3dbd-49ec-917e-ecc5040bbc14\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_958_XYZ_\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("K3Y79MREYF"));
        
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_958_XYZ_\"}")
                .header("X-B3-Flags", "duX_vWhWy421U6")
                .header("X-B3-Sampled", "A]4sAHkL7lwFr2YZ")
                .header("X-B3-TraceId", "_EM_959_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("MEDR4CHFX4"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("X-B3-Flags", "_EM_960_XYZ_")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "_EM_961_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471c-da00-4060-8c6d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_283_XYZ_")
                .header("b3", "foo")
                .header("X-B3-Sampled", "pbzA_L95")
                .header("X-B3-TraceId", "_EM_285_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424487-5596-4399-B2bc-ed6a5f83ae4f\", " + 
                    " \"responsePadding\": \"3Vm_epGHScF_Gl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_283_XYZ_")
                .header("X-B3-Flags", "1")
                .header("b3", "_EM_962_XYZ_")
                .header("X-B3-TraceId", "_EM_218_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"31ba8099-a011-488a-a459-cfc66cca6dd2\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_30() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "-512")
                .d("CREATED_AT", "\"1995-06-16 11:29:29\"")
                .d("UPDATED_AT", "\"2020-03-29 05:32:48\"")
                .d("VALID_FROM", "\"2030-06-15 06:00:17\"")
                .d("VALID_UNTIL", "\"1940-07-08 00:57:13\"")
                .d("TAN_HASH", "\"_EM_2034_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2063-12-16 12:29:51\"")
                .d("UPDATED_AT", "\"1929-01-01 02:29:16\"")
                .d("VALID_FROM", "\"1948-04-29 00:38:20\"")
                .d("VALID_UNTIL", "\"1941-04-02 04:16:59\"")
                .d("TAN_HASH", "\"6ce70206eb9249fa819c18eeeb3c615b06d2a93721a71698f256661f5bfdfd6f\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1909-07-01 16:48:20\"")
                .d("UPDATED_AT", "\"2000-11-16 15:16:29\"")
                .d("HASHED_GUID", "\"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"_EM_2035_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2009-04-16 13:29:24\"")
                .d("UPDATED_AT", "\"1913-04-16 11:29:37\"")
                .d("HASHED_GUID", "\"_EM_1445_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8260530e9e2c02aa23aa8c988d0eb2f74580d2abd5d210836252cbe3fc236943\"")
                .d("TELE_TAN_HASH", "\"_EM_2036_XYZ_\"")
                .d("TAN_COUNTER", "2121")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"mutGj\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "756122704")
                .d("CREATED_AT", "\"2000-06-16 11:29:11\"")
                .d("UPDATED_AT", "\"2012-05-05 09:03:29\"")
                .d("HASHED_GUID", "NULL")
                .d("REGISTRATION_TOKEN_HASH", "\"j\"")
                .d("TELE_TAN_HASH", "\"eaDnisVcngurZpj\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_1684_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "-8192")
                .d("CREATED_AT", "\"2048-01-31 12:06:33\"")
                .d("UPDATED_AT", "\"1936-12-03 20:32:27\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_222_XYZ_\"")
                .d("TELE_TAN_HASH", "\"sZACZYCJIq9z4\"")
                .d("TAN_COUNTER", "2097152")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"5e50c6b10F277bc1E3Ef13fadBFAA1FB1333E0bdBAAEfDCDcCcDA1ABecEE6edB\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "y03Vv9Gkl")
                .header("X-B3-Flags", "_EM_48$_XYZ_s")
                .header("b3", "_EM_1440_XYZ_")
                .header("X-B3-Sampled", "urfCD")
                .header("X-B3-TraceId", "w")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"faA9b4959BAbedEf0eF9E2fFa16ADDe9cae96E215EB66C9bCEc12c7c7Dc63fdE\", " + 
                    " \"keyDob\": \"A3ffa83C3ccb6C211ddaBAFDbEdaCdcACAe5c669Cec8BEDF3FF6F3fF5fA9693f\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("X-B3-Flags", "O1S")
                .header("X-B3-TraceId", "_EM_1680_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"623d1b50-cd41-4ad2-9d16-c06d6ddf5371\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_1681_XYZ_\"}")
                .header("X-B3-Flags", "a3hG")
                .header("X-B3-Sampled", "falSe")
                .header("X-B3-TraceId", "gUMohl2")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("JEANMPVXUB"));
        
        
        ValidatableResponse res_3 = given().accept("*/*")
                .header("X-B3-Flags", "5fM9")
                .header("X-B3-Sampled", "_EM_489_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d900-4e60-8d7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_jDdycAa4yTiawRv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "6Cp6H6QMYM_u")
                .header("X-B3-Flags", "foo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "FAlSe")
                .header("X-B3-TraceId", "_EM_2033_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"78413379-5697-4299-b3bc-ed7b5e75ae4f\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_5 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "1")
                .header("b3", "z3D1FLP3TM1")
                .header("X-B3-Sampled", "Kn1EeAmdu")
                .header("X-B3-TraceId", "_EM_587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-9011-498a-9259-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"zsQcnxwhFq\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("02bcadaa-5809-4208-9a36-06f802d58f0e"))
                .body("'responsePadding'", containsString("zWUErZzyijnuRiq"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_5.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        given().accept("*/*")
                .header("cwa-fake", "PjP4A7E")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"c5aad1d9-b659-40b6-a1d6-a9ce58d3f3ae\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_31() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 17L)
                .d("VERSION", "432")
                .d("CREATED_AT", "\"1945-08-13 09:15:09\"")
                .d("UPDATED_AT", "\"2034-03-26 08:21:56\"")
                .d("HASHED_GUID", "\"dUlL\"")
                .d("REGISTRATION_TOKEN_HASH", "\"UJ\"")
                .d("TELE_TAN_HASH", "\"ZLAb2e_1mtwDsgR2\"")
                .d("TAN_COUNTER", "878")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 18L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1916-04-14 16:00:32\"")
                .d("UPDATED_AT", "\"1996-01-16 08:34:44\"")
                .d("HASHED_GUID", "\"WK\"")
                .d("REGISTRATION_TOKEN_HASH", "\"7fdad95f3e8d30f5e73822031ef9052fc4ed5329030f69116bb1961691c7b75e\"")
                .d("TELE_TAN_HASH", "\"_EM_295_XYZ_\"")
                .d("TAN_COUNTER", "-130868")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 19L)
                .d("VERSION", "-8387665")
                .d("CREATED_AT", "\"2055-06-18 04:59:18\"")
                .d("UPDATED_AT", "\"2054-12-03 21:00:57\"")
                .d("HASHED_GUID", "\"_EM_296_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"SZjDH\"")
                .d("TELE_TAN_HASH", "\"JoPzCDCYcp\"")
                .d("TAN_COUNTER", "735")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_60_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "_EM_55_XYZ_")
                .header("X-B3-Flags", "foo")
                .header("b3", "_EM_291_XYZ_")
                .header("X-B3-Sampled", "_EM_292_XYZ_")
                .header("X-B3-TraceId", "_EM_293_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"4cfff830-aeec-4bbf-b238-e0e23e7daa18\", " + 
                    " \"responsePadding\": \"KuxQUreHzxJhp\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("346c28d9-4af9-4bab-9cf5-866eb8909612"))
                .body("'responsePadding'", containsString("AQaBmXVIOHM6CVJ"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("b3", "_EM_294_XYZ_")
                .header("X-B3-Sampled", "fo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ffcb7844-7437-4672-a8be-121a37c555d9\", " + 
                    " \"responsePadding\": \"_EM_57_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("04f5a3c0-abd1-4bb0-bfb1-26eba47d8322"))
                .body("'responsePadding'", containsString("5dHLFIeY8eCoxEa"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_32() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 17L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1945-08-13 09:16:09\"")
                .d("UPDATED_AT", "\"2034-07-26 07:13:54\"")
                .d("HASHED_GUID", "\"5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"K1Vlcnci\"")
                .d("TELE_TAN_HASH", "\"_EM_3281_XYZ_\"")
                .d("TAN_COUNTER", "1390")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"5L\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 18L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1916-04-30 11:29:29\"")
                .d("UPDATED_AT", "\"1996-01-16 00:32:59\"")
                .d("HASHED_GUID", "\"WK\"")
                .d("REGISTRATION_TOKEN_HASH", "\"7fdad95f3e8d30f5e73822031ef9052fc4ed5329030f69116bb1961691c7b75e\"")
                .d("TELE_TAN_HASH", "\"TINYINT\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"qRDs01fMu\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 19L)
                .d("VERSION", "-8387921")
                .d("CREATED_AT", "\"2055-06-18 13:29:29\"")
                .d("UPDATED_AT", "\"2054-12-03 21:00:57\"")
                .d("HASHED_GUID", "\"u5\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_3373_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_3282_XYZ_\"")
                .d("TAN_COUNTER", "-4193569")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_1619_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("X-B3-Flags", "_EM_3274_XYZ_")
                .header("b3", "2b3")
                .header("X-B3-Sampled", "falSE")
                .header("X-B3-TraceId", "_EM_3280_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"4cfff830-aeec-4bbf-b238-e0e23e7daa18\", " + 
                    " \"responsePadding\": \"JPudDgTfql9p0m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "foo")
                .header("b3", "_EM_3372_XYZ_")
                .header("X-B3-Sampled", "_EM_3275_XYZ_")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"e0db6854-7527-4672-a8be-111a36c654ca\", " + 
                    " \"responsePadding\": \"PfwI\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("5b1ba765-9ee9-40d5-a4f6-b958fec3a035"))
                .body("'responsePadding'", containsString("A5O7eESS5CzfPuj"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_33() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 62L)
                .d("VERSION", "1")
                .d("CREATED_AT", "\"2000-04-16 13:29:29\"")
                .d("UPDATED_AT", "\"2020-01-31 05:00:16\"")
                .d("VALID_FROM", "\"2000-02-16 11:29:17\"")
                .d("VALID_UNTIL", "\"1940-07-08 16:25:13\"")
                .d("TAN_HASH", "\"_EM_219_XYZ_\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 63L)
                .d("VERSION", "-32")
                .d("CREATED_AT", "\"2063-12-23 07:29:29\"")
                .d("UPDATED_AT", "\"1929-06-01 02:29:16\"")
                .d("VALID_FROM", "\"1948-12-29 00:29:52\"")
                .d("VALID_UNTIL", "\"1941-06-02 09:29:29\"")
                .d("TAN_HASH", "\"07a3154b52ed7333f4f5079dd1481895ad270d29a219f9a271a9fe66c315f896\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 64L)
                .d("VERSION", "524288")
                .d("CREATED_AT", "\"1909-07-16 11:48:29\"")
                .d("UPDATED_AT", "\"2000-11-05 11:16:59\"")
                .d("HASHED_GUID", "\"_EM_1442_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4a799eacfd732103680f622b14c8ed9604a9dfab01ef2b71bed4cfa88cebbeab\"")
                .d("TELE_TAN_HASH", "\"_EM_2416_XYZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_287_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 65L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2041-04-16 13:29:24\"")
                .d("UPDATED_AT", "\"2041-04-01 12:31:29\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"8260530e9e2c02aa23aa8c988d0eb2f74580d2abd5d210836252cbe3fc236943\"")
                .d("TELE_TAN_HASH", "\"KCt\"")
                .d("TAN_COUNTER", "89")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_EM_2417_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 66L)
                .d("VERSION", "-128")
                .d("CREATED_AT", "\"2000-06-16 01:29:11\"")
                .d("UPDATED_AT", "\"2012-05-05 09:03:29\"")
                .d("HASHED_GUID", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("REGISTRATION_TOKEN_HASH", "\"af10050f64e461df745a6d84c4003aff17e297ab338a2c8b233c2b9892089972\"")
                .d("TELE_TAN_HASH", "\"_EM_2418_XYZ_\"")
                .d("TAN_COUNTER", "4194304")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"eb9Bc3A4ABAbeeF00ea8D20aa06AEDf9cFfA7F006EC87BAaEEc22c5e8Db830fF\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("APP_SESSION", 67L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2048-01-31 11:06:33\"")
                .d("UPDATED_AT", "\"1933-06-03 20:31:27\"")
                .d("HASHED_GUID", "\"_EM_491_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_222_XYZ_\"")
                .d("TELE_TAN_HASH", "\"sZACZYCJIq9z4\"")
                .d("TAN_COUNTER", "2048")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_592_XYZ_\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .header("cwa-fake", "DGVifC")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"ddd84fc1-8c4b-4722-B7e6-3ffe7d26f4c0\", " + 
                    " \"responsePadding\": \"_EM_2413_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Flags", "_EM_484_PYZ_s")
                .header("X-B3-Sampled", "faLSe")
                .header("X-B3-TraceId", "_EM_1538_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"8c6ba550301ee2fc8578b60a3b0c739fb65e613ffdae455f8862dd11f758da0e\", " + 
                    " \"keyDob\": \"B3feb84C3ccb6C200eeaBBFEcDdaCdcADBe5b769Dec8AEDF3EF5E3fF4eBA692f\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("f1408e80-9c3c-48a6-9a1f-e8790218fef6"))
                .body("'responsePadding'", containsString("U"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_1.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        ValidatableResponse res_2 = given().accept("*/*")
                .header("b3", "_EM_584_XYZ_")
                .header("X-B3-Sampled", "_EM_1441_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"623d1b50-cd41-4ad2-9d16-c06d6ddf5371\", " + 
                    " \"responsePadding\": \"4bAUAGjETMU\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"a\"}")
                .header("b3", "_EM_585_XYZ_")
                .header("X-B3-TraceId", "gUMohl2")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("Z88V9H84AB"));
        
        
        ValidatableResponse res_4 = given().accept("*/*")
                .header("X-B3-Sampled", "_EM_489_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"fe4d471d-d910-4f60-Bd7d-57583b4aa39e\", " + 
                    " \"responsePadding\": \"_EM_2414_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
        
        given().accept("*/*")
                .header("cwa-fake", "6Cp8H6QMYM_u")
                .header("X-B3-Flags", "_EM_2415_XYZ_")
                .header("b3", "foo")
                .header("X-B3-Sampled", "FAlSe")
                .header("X-B3-TraceId", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"87424378-5697-4399-b3bc-ed6b5f74ae5e\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        DnsCacheManipulator.setDnsCache("cwa-testresult-server", "127.0.26.222");
        assertNotNull(wireMock__TCP__cwa_testresult_server__8088);
        wireMock__TCP__cwa_testresult_server__8088.stubFor(
            post(urlEqualTo("/api/v1/app/result"))
            .atPriority(1)
            .willReturn(
                aResponse()
                    .withHeader("Connection","close")
                    .withHeader("Content-Type","application/json")
                    .withStatus(201)
                    .withBody("\"d1E_R8UtTxecd\"")
                )
        );
        
        
        ValidatableResponse res_6 = given().accept("application/json")
                .header("cwa-fake", "1")
                .header("X-B3-Sampled", "Kn1EeAmdu")
                .header("X-B3-TraceId", "_EM_587_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"41cb80a8-9011-498a-945a-cfc66cca6dd2\", " + 
                    " \"responsePadding\": \"_EM_217_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("520f4b68-f474-4f1c-ab5a-6d63ae3991a4"))
                .body("'responsePadding'", containsString("4HI5xKxbYFfS8AD"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_6.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
        
        wireMock__TCP__cwa_testresult_server__8088.resetAll();
        DnsCacheManipulator.clearDnsCache();
    }
    
    
    @Test @Timeout(60)
    public void test_34() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 6L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1964-11-09 16:14:13\"")
                .d("UPDATED_AT", "\"1926-11-23 15:04:26\"")
                .d("HASHED_GUID", "\"_EM_30_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4658d2193600688be424252146e27bab8dc7d62d9a1949b802d5eee8fee457be\"")
                .d("TELE_TAN_HASH", "\"_EM_19_XYZ_r\"")
                .d("TAN_COUNTER", "-262144")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_98_XYZ_C\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 7L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2000-06-13 15:49:29\"")
                .d("UPDATED_AT", "\"2100-09-24 11:59:05\"")
                .d("HASHED_GUID", "\"_EM_253_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_254_XYZ_\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "16388")
                .d("SOT", "\"_EM_99_XYZ_\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"p\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("cwa-fake", "_EM_249_XYZ_")
                .header("X-B3-Flags", "_EM_251_XYZ_")
                .header("b3", "o2KU_TJDCyUb")
                .header("X-B3-Sampled", "_EM_28_XYZ_")
                .header("X-B3-TraceId", "_EM_252_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a499ae91-8cac-4dbc-bf0e-0703fc7cb23c\", " + 
                    " \"responsePadding\": \"_EM_250_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("544f8cfa-adeb-4abe-9574-0dcd68268139"))
                .body("'responsePadding'", containsString("OTuOj21r4x4dxIZ"));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) res_0.extract().response().jsonPath().getJsonObject("")).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_35() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"odRB109p4krR\"}")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("7ZWEKMD8GA"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"_EM_371_XYZ_\"}")
                .header("b3", "fo")
                .header("X-B3-Flags", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .header("X-CWA-TELETAN-TYPE", "foo")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
        
    }
    
    
    @Test @Timeout(60)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"bLrAL\", " + 
                    " \"keyDob\": \"\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_38() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 6L)
                .d("VERSION", "71")
                .d("CREATED_AT", "\"1964-11-09 16:14:13\"")
                .d("UPDATED_AT", "\"1926-11-23 15:04:26\"")
                .d("HASHED_GUID", "\"_EM_30_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"4658d2193600688be424252146e27bab8dc7d62d9a1949b802d5eee8fee457be\"")
                .d("TELE_TAN_HASH", "\"_EM_19_XYZ_\"")
                .d("TAN_COUNTER", "33555244")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"pCf0BNBe5\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("APP_SESSION", 7L)
                .d("VERSION", "-282")
                .d("CREATED_AT", "\"1914-02-13 15:49:42\"")
                .d("UPDATED_AT", "\"2100-09-24 20:59:05\"")
                .d("HASHED_GUID", "\"XPXn\"")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "4")
                .d("SOT", "\"c4qllo0HzS36Z\"")
                .d("HASHED_GUID_DOB", "NULL")
                .d("TELETAN_TYPE", "\"p\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "XuxJUt2SDvzMy")
                .header("X-B3-Flags", "foo")
                .header("b3", "_EM_27_XYZ_")
                .header("X-B3-Sampled", "_EM_28_XYZ_")
                .header("X-B3-TraceId", "_EM_29_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a499ae91-8cac-4dbc-bf0e-0703fc7cb23c\", " + 
                    " \"responsePadding\": \"_EM_17_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "I")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"d8d2ec0d-2f51-4800-Aae8-a5bfa8b19cac\", " + 
                    " \"responsePadding\": \"pxdE9bHLXlOywHM\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("cwa-fake", "pUIcL6RPtnoclg")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"b6dd9390-576b-43ac-Adad-e134e7e2ac63\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"zCc9UlD0C8MPNIyr\", " + 
                    " \"keyDob\": \"xTo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"BcEXZI\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test @Timeout(60)
    public void test_42() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"f61ccefc-85fb-475b-A9cc-74fe0d8b1e58\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems);
    }


}
